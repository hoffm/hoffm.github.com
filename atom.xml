<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Worrier]]></title>
  <link href="http://code-worrier.com/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2012-09-30T15:24:23-04:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A tiny benchmarking utility]]></title>
    <link href="http://code-worrier.com/blog/tiny-benchmarking/"/>
    <updated>2012-09-30T14:54:00-04:00</updated>
    <id>http://code-worrier.com/blog/tiny-benchmarking</id>
    <content type="html"><![CDATA[<p>While working on a longer (forthcoming) post, I wrote a little benchmakring utility that I want to share.
Here it is:</p>

<figure class='code'><figcaption><span>tiny_timer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TinyTimer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">benchmark</span><span class="p">(</span><span class="n">samples</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">times</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">samples</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="k">yield</span>
</span><span class='line'>      <span class="n">times</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">times</span><span class="o">.</span><span class="n">sum</span> <span class="o">/</span> <span class="n">samples</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>As you can see, this method runs a specified number of trials of a block of code and returns the average time in seconds it took to execute the block.
Usage examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; require <span class="s1">&#39;tiny_timer&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">[</span><span class="s2">&quot;TinyTimer&quot;</span><span class="o">]</span>
</span><span class='line'>&gt;&gt; TinyTimer.benchmark<span class="o">{</span> <span class="o">(</span>0..100000<span class="o">)</span>.map<span class="o">{</span>rand<span class="o">(</span>10<span class="o">)}</span>.sort <span class="o">}</span>
</span><span class='line'><span class="o">=</span>&gt; 0.0670641
</span><span class='line'>&gt;&gt; TinyTimer.benchmark<span class="o">(</span>100<span class="o">){</span> 2**1000000 <span class="o">}</span>
</span><span class='line'><span class="o">=</span>&gt; 0.00841815
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invoke a Rake Task from Another Task]]></title>
    <link href="http://code-worrier.com/blog/embedded-rake-tasks/"/>
    <updated>2012-09-25T17:02:00-04:00</updated>
    <id>http://code-worrier.com/blog/embedded-rake-tasks</id>
    <content type="html"><![CDATA[<p>You can invoke a rake task from another rake task.
Here&#8217;s how:</p>

<figure class='code'><figcaption><span>examples.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:examples</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Inner task.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:inner_task</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Some code that accomplishes a task.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Outer task.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:outer_task</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Some code.</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;examples:inner_task&#39;</span><span class="o">].</span><span class="n">execute</span> <span class="c1">#Execute innter task.</span>
</span><span class='line'>    <span class="c1"># Some other code.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Now when you execute <code>rake examples:outer_task</code>, you will execute the inner task in whatever context you placed it.
Using this contruction allows you to break down unweildy tasks into smaller ones, which perhaps you&#8217;ll want to reuse in different contexts elsewhere.</p>

<p>Here&#8217;s a toy examples that actually works:</p>

<figure class='code'><figcaption><span>toys.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:toys</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Inner task: Square the value.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:square</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@value</span> <span class="o">*=</span> <span class="vi">@value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Outer task: Initialize the value and square thrice.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:square_three_times</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@value</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s1">&#39;toys:square&#39;</span><span class="o">].</span><span class="n">execute</span><span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;The value is </span><span class="si">#{</span><span class="vi">@value</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this in the shell, we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake toys:square_three_times --trace
</span><span class='line'>** Invoke toys:square_three_times <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Execute toys:square_three_times
</span><span class='line'>** Execute toys:square
</span><span class='line'>** Execute toys:square
</span><span class='line'>** Execute toys:square
</span><span class='line'>The value is 256.
</span></code></pre></td></tr></table></div></figure>


<p>And yes, I know you&#8217;re thinking it now: rake tasks can call themselves quite happily.</p>

<p>You can also invoke rake tasks from within ActiveRecord migrations.
This can come in handy when you want to initialize a bunch of data immeidately after altering the database schema.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Autocomplete Git Commands and Branch Names in Bash]]></title>
    <link href="http://code-worrier.com/blog/autocomplete-git/"/>
    <updated>2012-09-09T21:44:00-04:00</updated>
    <id>http://code-worrier.com/blog/autocomplete-git</id>
    <content type="html"><![CDATA[<p>In bash in Mac OS X, you can use [TAB] to autocomplete file paths.
Wouldn&#8217;t if be nice if you could do the same with git commands and branch names?</p>

<p>You can.
Here&#8217;s how.</p>

<!-- more -->


<p>First get the <code>git-completion.bash</code> script (view it <a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">here</a>) and put it in your home directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</span></code></pre></td></tr></table></div></figure>


<p>Next, add the following lines to your <code>.bash_profile</code>.
This tells bash to execute the git autocomplete script if it exists.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ -f ~/.git-completion.bash ]; then
</span><span class='line'>  . ~/.git-completion.bash
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>Now open a new shell, <code>cd</code> into a git repo, and start typing a git command.
You should find that [TAB] now autocompletes git commands and git branch names.</p>

<p>For example, if you type <code>git</code> then add a space and hit [TAB], you&#8217;ll get a readout like this, which lists all available git commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add                 filter-branch       reflog 
</span><span class='line'>am                  format-patch        relink 
</span><span class='line'>annotate            fsck                remote 
</span><span class='line'>apply               gc                  repack 
</span><span class='line'>archive             get-tar-commit-id   replace 
</span><span class='line'>bisect              grep                request-pull 
</span><span class='line'>blame               gui                 reset 
</span><span class='line'>branch              help                revert 
</span><span class='line'>bundle              imap-send           rm 
</span><span class='line'>checkout            init                send-email 
</span><span class='line'>cherry              instaweb            shortlog 
</span><span class='line'>cherry-pick         log                 show 
</span><span class='line'>citool              merge               show-branch 
</span><span class='line'>clean               mergetool           stage 
</span><span class='line'>clone               mv                  stash 
</span><span class='line'>commit              name-rev            status 
</span><span class='line'>config              notes               submodule 
</span><span class='line'>describe            p4                  svn 
</span><span class='line'>diff                pull                tag 
</span><span class='line'>difftool            push                whatchanged 
</span><span class='line'>fetch               rebase </span></code></pre></td></tr></table></div></figure>


<p>Now to learn what some of these more exotic git commands do!
What&#8217;s your favorite git command?</p>

<p>(I learned this way of installing <code>git-completion.bash</code> <a href="http://apple.stackexchange.com/questions/55875/how-can-i-get-git-to-autocomplete-e-g-branches-at-the-command-line/55886#55886">here</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Ruby's 'next' keyword return?]]></title>
    <link href="http://code-worrier.com/blog/map-and-next/"/>
    <updated>2012-09-04T19:55:00-04:00</updated>
    <id>http://code-worrier.com/blog/map-and-next</id>
    <content type="html"><![CDATA[<p>Pop quiz, hotshot:
<strong>What does the following Ruby expression return?</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="k">next</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">;</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>It turns out I&#8217;m not much of a hotshot, because this how I reasoned through this question while at work today:</p>

<ol>
<li><code>Array#map</code> evaluates the block for each member of the array and returns a new array of the returned values, in order.</li>
<li>When <code>n == 1</code> or <code>n == 3</code>, the block evaluates to <code>2*n</code>.</li>
<li>However, when <code>n == 2</code> we hit the <code>next</code> keyword and nothing gets evaluated.</li>
<li>Therefore this expression returns <code>[2,6]</code>.</li>
</ol>


<p>Reinforcing this line of reasoning, a very similar expression,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="k">next</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">;</span> <span class="nb">puts</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>gives the analog of this result:
it prints &#8220;2&#8221; and then &#8220;6&#8221; and then return.
The iteration that hits <code>next</code> just gets skipped.
Analogously, the version with <code>map</code> should return <code>[2,6]</code></p>

<p><strong>Wrong!</strong></p>

<p>In fact, the answer to the quiz is&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The error in the reasoning above is contained in premise (3).
It turns out that <strong>when <code>next</code> is evaluated, it returns <code>nil</code></strong>.</p>

<p>Similarly,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>returns the same array, <code>[2, nil, 6]</code>, because <code>... if false</code> returns nil no matter what (syntactically valid) expression <code>...</code> is.</p>

<p>So, if you&#8217;re using <code>map</code>, and you want to skip some elements, you can&#8217;t just use <code>next</code> or <code>if</code>.
You also need to deal with the <code>nil</code>s when you&#8217;re done, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="k">next</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">;</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span><span class="o">.</span><span class="n">compact</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively—although it&#8217;s probably more expensive—you could select the elements you want before proceeding with the operations you want to perform on them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">reject</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let me know in the comments if you can think of a generalizable implementation that&#8217;s more elegant than either of these.
In the meantime, may you never make the same mistake I made!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: More Legible Output with 'Kernel#y']]></title>
    <link href="http://code-worrier.com/blog/more-legible-output-with-y/"/>
    <updated>2012-08-30T14:24:00-04:00</updated>
    <id>http://code-worrier.com/blog/more-legible-output-with-y</id>
    <content type="html"><![CDATA[<p>Ever tried to get a sense of an ActiveRecord object by squinting though output like this?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; User.find_by_login("Michael Hoffman").recipes.last
</span><span class='line'>=&gt; #&lt;Recipe id: 18891, title: "Pasta with Lemon-Parmesan Butte
</span><span class='line'>r", created_at: "2012-08-29 00:03:55", updated_at: "2012-08-29
</span><span class='line'>16:20:58", description: "I was walking by a little pizzeria in
</span><span class='line'>the East Vill...", recipe_category_id: 36, serving_size: "4 as
</span><span class='line'>a pasta course, 2 as a main", user_id: 784, editors_pick: fals
</span><span class='line'>e, editors_comments: "", label: "pasta_with_lemonparmesan_butt
</span><span class='line'>er", flag_inappropriate: false, wine_id: nil, recipe_style: "a
</span><span class='line'>b", varietal_id: nil, rating_average: 0, makes_serves: "Serves
</span><span class='line'>", flag_inappropriate_comments: nil, sommelier_comments: nil, 
</span><span class='line'>comments_count: 1, is_winner: false, interest: 1, is_finalist:
</span><span class='line'>nil, new_categories_added: nil, admin_categorization_note: nil
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>Yuck.</p>

<!-- more -->


<p>Luckily, there&#8217;s a super simple way to get some nicer formatting.
The <code>Kernel</code> module has a private instance method <code>#y</code> which will print out an active record object (or anything else) as YAML.
Check it out:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; y User.find_by_login("Michael Hoffman").recipes.last
</span><span class='line'>--- !ruby/ActiveRecord:Recipe 
</span><span class='line'>attributes: 
</span><span class='line'>  sommelier_comments: 
</span><span class='line'>  recipe_style: ab
</span><span class='line'>  updated_at: 2012-08-29 16:20:58
</span><span class='line'>  admin_categorization_note: 
</span><span class='line'>  is_finalist: 
</span><span class='line'>  is_winner: "0"
</span><span class='line'>  editors_comments: ""
</span><span class='line'>  serving_size: 4 as a pasta course, 2 as a main
</span><span class='line'>  title: Pasta with Lemon-Parmesan Butter
</span><span class='line'>  interest: "1"
</span><span class='line'>  editors_pick: "0"
</span><span class='line'>  recipe_category_id: "36"
</span><span class='line'>  rating_average: "0"
</span><span class='line'>  id: "18891"
</span><span class='line'>  new_categories_added: 
</span><span class='line'>  flag_inappropriate_comments: 
</span><span class='line'>  wine_id: 
</span><span class='line'>  description: "I was walking by a little pizzeria in the East 
</span><span class='line'>    Village - one I've never been to and may never go to - and
</span><span class='line'>    I slowed my gait to glance at the menu. My eyes happened t
</span><span class='line'>    o land on a pasta dish. I don't remember exactly what it w
</span><span class='line'>    as called, but it involved lemon and parmesan, and not muc
</span><span class='line'>    h else. Lemon! So obvious. Why had I never thought of that
</span><span class='line'>    ? The next night I made this for dinner."
</span><span class='line'>  comments_count: "1"
</span><span class='line'>  makes_serves: Serves
</span><span class='line'>  varietal_id: 
</span><span class='line'>  user_id: "784"
</span><span class='line'>  label: pasta_with_lemonparmesan_butter
</span><span class='line'>  flag_inappropriate: "0"
</span><span class='line'>  created_at: 2012-08-29 00:03:55
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<p>Notice that, in addition to producing more legible formatting, <code>#y</code> does not truncate values, so we get to see the whole description of the recipe.
Another great use case for this method is visualizing nested hashes and arrays.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; a = {:animals =&gt; {:mammals =&gt; [:dog, :cat, :narwhal], :fish =&gt; [:tuna, :shark] }, :fruits =&gt; [:plum, :peach, :banana]}
</span><span class='line'>=&gt; {:fruits=&gt;[:plum, :peach, :banana], :animals=&gt;{:mammals=&gt;[:dog, :cat, :narwhal], :fish=&gt;[:tuna, :shark]}}
</span><span class='line'>&gt;&gt; y a
</span><span class='line'>--- 
</span><span class='line'>:fruits: 
</span><span class='line'>- :plum
</span><span class='line'>- :peach
</span><span class='line'>- :banana
</span><span class='line'>:animals: 
</span><span class='line'>  :mammals: 
</span><span class='line'>  - :dog
</span><span class='line'>  - :cat
</span><span class='line'>  - :narwhal
</span><span class='line'>  :fish: 
</span><span class='line'>  - :tuna
</span><span class='line'>  - :shark
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<p>Nice, huh?</p>

<p>One caveat:
<a href="http://stackoverflow.com/questions/11571801/rails-console-y-helper-returns-nameerror-rather-than-yaml-formatting-output/11572045#11572045">Apparently</a> this method relies on the <a href="http://stackoverflow.com/a/11572045">Syck YAML parser</a>.
For this reason, it won&#8217;t immediately work out of the box with Ruby 1.9.3, which uses the <a href="https://github.com/tenderlove/psych/">Psych parser</a> by default.
If you&#8217;re using 1.9.3 and you want to play around with <code>Kernel#y</code>, run <code>YAML::ENGINE.yamler = 'syck'</code> to change parsers.</p>

<p>And a question: I&#8217;d like to know how to get <code>#y</code> to print out ActiveRecord attributes in the same order as they are normally displayed.</p>

<p>(By the way, I highly recommend trying out <a href="http://food52.com/recipes/18891_pasta_with_lemonparmesan_butter">the recipe</a> mentioned above.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why RTFM is Some Bullshit]]></title>
    <link href="http://code-worrier.com/blog/why-rtfm-is-some-bullshit/"/>
    <updated>2012-08-29T10:48:00-04:00</updated>
    <id>http://code-worrier.com/blog/why-rtfm-is-some-bullshit</id>
    <content type="html"><![CDATA[<p>Learning to code is hard.</p>

<p>I&#8217;m not talking about the sense in which we&#8217;re all still learning.
I mean when you first start out, the first few months.
During this period, every tiny bit of progress you make comes at the expense of an excruciating, time-consuming trial.</p>

<p>Personally, I had the great fortune of being around patient, empathic experts who helped me through the worst of it.
(Thanks <a href="https://twitter.com/binarycleric">Jon</a>, <a href="https://twitter.com/jackiekircher">Jackie</a>, <a href="https://twitter.com/laurenvoswinkel">Lauren</a>, et al!)
But not everyone is so lucky, and sooner or later a new programmer is bound to encounter <a href="http://en.wikipedia.org/wiki/RTFM">RTFM</a> and its new-fangled cousins, GIYF and LMGTFY.</p>

<!-- more -->


<p>Ever ask an elementary question about coding or about getting your development environment set up, and encounter one of the following responses?</p>

<ol>
<li>Contempt without assistance.</li>
<li>A link to a page you don&#8217;t understand, with no explanation.</li>
<li>Overly brief assistance, with or without contempt.</li>
</ol>


<p>Whether or not they say it explicitly, the authors of these responses are expressing the RTFM sentiment.
And RTFM is bullshit.</p>

<p>I&#8217;m not the first person to say this, of course.
But as a programmer who is still very much in touch with what it&#8217;s like to know nothing, I hope I am in a position fortify the empathy of my more seasoned colleagues.</p>

<p>No one feels Meno&#8217;s Paradox as viscerally as the Googling noob.</p>

<blockquote><p>And how will you inquire into a thing when you are wholly ignorant of what it is?
Even if you happen to bump right into it, how will you know it is the thing you didn&#8217;t know?</p></blockquote>

<p>Answering technical questions via internet searches is a <em>skill</em> that takes <em>practice</em> to hone and which requires <em>background knowledge</em>.
Teaching yourself to code on the internet is a boostrapping process:
The more you learn, the better you get at learning it, and before you&#8217;ve learned very much, learning is really hard.</p>

<p>If you get stuck and you seek help on the internet, you need to know at least the following in order to have any hope of success:</p>

<ul>
<li>The nature of the problem your having.</li>
<li>The vocabulary that is commonly used to express this problem.</li>
<li>How to understand potential solutions to your problem.</li>
<li>How to implement potential solutions to see if they work.</li>
<li>What would constitute a solution&#8217;s working.</li>
</ul>


<p>People who ask stupid technical questions might be stupid people.
Or, more likely, they might just be missing one or more of the pieces of knowledge they need to ask a smart quetsion and understand the answer.
It&#8217;s not their fault they don&#8217;t know these things.
They are beginners.
Learning to figure stuff our using documentation and Google is a skill they&#8217;re developing along with all the others.</p>

<p>So, if someone asks a stupid question, consider taking the time answer it, fully and cheerfully.
Or don&#8217;t answer at all.
Just remember: RTFM is some lazy, rude bullshit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All your undefined vars are evaluate to nil.]]></title>
    <link href="http://code-worrier.com/blog/all-your-vars/"/>
    <updated>2012-08-27T18:14:00-04:00</updated>
    <id>http://code-worrier.com/blog/all-your-vars</id>
    <content type="html"><![CDATA[<p><em>(NB: I learned much of what I discuss here from this <a href="http://stackoverflow.com/a/4023224/882025">post</a>.)</em></p>

<p>What does a brand new, never-before-mentioned variable evaluate to in Ruby?
Perhaps it seems that the correct answer is: it depends what kind of variable.
Undefined instance variables, for example, evaluate to <code>nil</code>, whereas undefined local variables can&#8217;t be evaluated at all.</p>

<!-- more -->


<p>A little experimentation in irb seems to confirm this hypothesis.
Uninitialize local variables raise a <code>NameError</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; local_variables
</span><span class='line'>=&gt; []
</span><span class='line'>&gt;&gt; local_var
</span><span class='line'>NameError: undefined local variable or method `local_var' for main:Object</span></code></pre></td></tr></table></div></figure>


<p>whereas instance variables evaluate to <code>nil</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; instance_variables
</span><span class='line'>=&gt; []
</span><span class='line'>&gt;&gt; @instance_var
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<p>(Global variables behave the same way in this respect as instance varables.)</p>

<p>So, again, it seems as if the correct answer to our question is, &#8220;It depends.&#8221;
But that&#8217;s wrong.
In fact, the question has a single, simple correct answer:
<em>All types of uninitialized variables evaluate to nil.</em></p>

<p>Here&#8217;s proof:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; local_var = "something or other" if false
</span><span class='line'>=&gt; nil
</span><span class='line'>&gt;&gt; local_var
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<p>The initialization of <code>local_var</code> is never evaluated, because the condition <code>false</code> is, of course, not met.
Yet, it seems that the mere fact that the parser has parsed <code>local_var</code> suffices to avoid the <code>NameError</code> when evaluating the variable.
Why?</p>

<p>The answer is that the <code>NameError</code> was merely an error of ambiguity:
In our first example, the parser could not decide whether <code>local_var</code> was a local variable, or the name of a method—shorthand for <code>self.local_var</code>.
The error message we got didn&#8217;t do a great job of explaining this, but it did hint at it with the phrase &#8220;variable or method&#8221;.
Once the parser has encountered <code>local_var</code> in an unambiguously variable-like context—namely, <code>local_var = "something or other"</code>— it has no problem evaluating the name as the name of a variable.
And, as I&#8217;ve claimed, all uninitialized variable evaluate to <code>nil</code>.</p>

<p>So, what appeared to be a difference between local varables and other types of variables is actually just a coincidence of Ruby syntax.
Ruby gives us the flexibility to leave the receiver to which we pass a method implicit:
if we don&#8217;t explicitly identify a reciever, the message is passed to the current object.
However, this flexibilty comes at the price of ambiguity;
absent additional context, methods invoked on implcitly defined receivers look to the world (and, more importantly, the parser!) just like local variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Recursive Arrays in Ruby]]></title>
    <link href="http://code-worrier.com/blog/recursive-arrays/"/>
    <updated>2012-08-16T22:30:00-04:00</updated>
    <id>http://code-worrier.com/blog/recursive-arrays</id>
    <content type="html"><![CDATA[<p>They&#8217;re real!</p>

<p>In Ruby, an array can contain itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[.</span><span class="n">.</span><span class="o">.]]</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">equal?</span> <span class="n">a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>But <a href="http://stackoverflow.com/questions/10606734/what-are-recursive-arrays-good-for">why would you want to go and do that?</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Helper methods in the Rails console?]]></title>
    <link href="http://code-worrier.com/blog/helper-methods-in-console/"/>
    <updated>2012-08-14T11:53:00-04:00</updated>
    <id>http://code-worrier.com/blog/helper-methods-in-console</id>
    <content type="html"><![CDATA[<p>So you want to mess around with a helper method in the console?
It&#8217;s super simple, as I just learned <a href="http://stackoverflow.com/questions/151030/how-do-i-call-controller-view-methods-from-the-console-in-rails">here</a> from <a href="http://caiochassot.com/">kch</a>.
Basically, Rails gets a bit <a href="http://nextlol.com/images/37181-yo-dawg-hotdawg.jpg">yo dawg</a> and provides a helper for your helpers—called &#8220;helper&#8221;.</p>

<p>Here&#8217;s an example. Suppose you have a helper module like the following:</p>

<!-- more -->




<figure class='code'><figcaption><span>cars_helper.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CarsHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">put_a_car_in</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">location</span> <span class="o">==</span> <span class="s2">&quot;your car&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;So you can drive while you drive!&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fire up a Rails console, and to create the helper-helper, all you have to do in include the module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; include CarsHelper
</span><span class='line'>=&gt; Object
</span><span class='line'>
</span><span class='line'>&gt;&gt; helper.put_a_car_in("your car")
</span><span class='line'>So you can drive while you drive!</span></code></pre></td></tr></table></div></figure>


<p>I hope this has been helpful. (Sorry, can&#8217;t help myself.)</p>

<p>Ok, I&#8217;m done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing Symbols, a Kata Lesson]]></title>
    <link href="http://code-worrier.com/blog/passing-symbols/"/>
    <updated>2012-08-12T22:02:00-04:00</updated>
    <id>http://code-worrier.com/blog/passing-symbols</id>
    <content type="html"><![CDATA[<p>In <a href="http://code-worrier.com/blog/kata/">my post</a> about the <a href="https://github.com/wbailey/kata">kata gem</a>, I promised to share something I learned from the <a href="https://github.com/wbailey/code_katas/blob/master/calculator.rb">calculator kata</a>.
Here goes.</p>

<p>The calculator kata asks you to construct a <code>Calculator</code> class the instances of which are initialized with comma-delimited strings of integers.
Next you are asked, one by one, to create a series of instance methods—<code>#sum</code>, <code>#prod</code>, <code>#div</code>, <code>#diff</code>—for the class that perform arithmetic operations on the stored integers.</p>

<p>Starting with <code>#sum</code> only, I wrote the class, obviously enough, like this:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">expr</span>
</span><span class='line'>      <span class="vi">@expr</span> <span class="o">=</span> <span class="n">expr</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum</span>
</span><span class='line'>      <span class="vi">@expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\,/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding in another instance method, it made sense to move to conversion from string to array into the initialization method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">expr</span>
</span><span class='line'>      <span class="vi">@expr_array</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\,/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum</span>
</span><span class='line'>      <span class="vi">@expr_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">prod</span>
</span><span class='line'>      <span class="vi">@expr_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I went on to add analogous subtraction and division methods, and then I started to get an itch:
Could I avoid writing &#8220;inject&#8221; four times?
More importantly, could I find a way that to write this class that reflected the underlying similarity in function shared by these four methods?</p>

<p>On a kata-fuelled lark, I decided to write the code I <em>wished</em> would work, even though I had no reason to think it would.
I passed the arithmetic operation symbols into the methods as arguments, and then into the inject blocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">expr</span>
</span><span class='line'>      <span class="vi">@expr_array</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\,/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum</span>
</span><span class='line'>      <span class="n">inject_op</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">prod</span>
</span><span class='line'>      <span class="n">inject_op</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># etc.</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inject_op</span> <span class="n">op</span>
</span><span class='line'>      <span class="vi">@expr_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To my surprise <em>this actually does work</em>!!</p>

<p>My initial reaction was: Go Ruby!
And then: Thank you, kata.</p>

<p>But, finally, in the spirit of the aphorism that &#8220;magic is code you don&#8217;t understand yet,&#8221; I thought: How do these <code>&amp;</code> blocks work, anyway?
More on that in a later post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Kata and the Kata Gem]]></title>
    <link href="http://code-worrier.com/blog/kata/"/>
    <updated>2012-08-12T18:01:00-04:00</updated>
    <id>http://code-worrier.com/blog/kata</id>
    <content type="html"><![CDATA[<p>A <a href="http://codekata.pragprog.com/">code kata</a> is a small programming challenge on which a developer can practice her craft.
Kata have solutions in the sense that they set our requirements that a program can meet or fail to meet.
However, it is the process of thinking through the kata—and perhaps implementing it multiple times in different ways—that is intended to provoke learning.</p>

<p>Of course, you can&#8217;t learn anything form a kata unless you <em>do</em> the kata.
Enter the <a href="https://github.com/wbailey/kata">kata gem</a> by <a href="http://exposinggotchas.blogspot.com/">Wes Bailey</a>.</p>

<!-- more -->


<p>I learned about the gem from a lightning talk Bailey delivered at the inaugural <a href="http://steelcityrubyconf.org/">Steel City Ruby Conference</a> in Pittsburgh.
(Incidentally, SCRC was my first programming conference, and it was fantastic.
My experience there inspired this blog.)</p>

<p>The kata gem reduces the friction between you and actually sitting down to do kata.
It accomplishes this by presenting the kata requirements in bite-sized pieces on the command line.
The process of working through a kata via the gem resembles the work flow of test-driven development.
(To be clear, working with the gem in no way precludes <em>actual</em> TDD.)
This is no accident;
Bailey&#8217;s <a href="https://github.com/wbailey/kata/wiki/Authoring-a-Kata">DSL</a> for authoring kata is modeled after the <a href="http://rspec.info/">Rspec</a> testing framework.</p>

<p>Here are the first two steps of the calculator kata, which asks the coder to create a <code>Calculator</code> class, instances of which are initialized with strings of numbers:</p>

<pre><code>Create a calculator that is initialized with a string expression
- detail: The expression is of the form digits separated by commas: "1,2"
- detail: The expression is accessed by a method named expr
- detail: The expression can be reset for evaluation at any time without re-initializing
- example: Calculator.new "1,2"

Add Method
  Create an add method that sums the string expression
  - detail: The method will return the sum of the digits
  - detail: The expression can contain 0, 1 or 2 numbers
  - detail: Then empty string will return 0
  - example: "" computes to 0
  - example: "1" computes to 1
  - example: "1,2" computes to 3
</code></pre>

<p>&#8230;and so on. Yes, things start off simply, but simple problems allow for focus on technique and experimentation.
In my <a href="http://code-worrier.com/blog/passing-symbols">next post</a>, I&#8217;ll relate something I learned by experimenting with the calculator kata.</p>
]]></content>
  </entry>
  
</feed>
