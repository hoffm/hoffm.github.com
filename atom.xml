<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael Hoffman]]></title>
  <link href="code-worrier.com/atom.xml" rel="self"/>
  <link href="code-worrier.com/"/>
  <updated>2012-08-12T22:51:07-04:00</updated>
  <id>code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Passing Symbols, a Kata Lesson]]></title>
    <link href="code-worrier.com/blog/passing-symbols/"/>
    <updated>2012-08-12T22:02:00-04:00</updated>
    <id>code-worrier.com/blog/passing-symbols</id>
    <content type="html"><![CDATA[<p>In <a href="http://code-worrier.com/blog/kata/">my post</a> about the <a href="https://github.com/wbailey/kata">kata gem</a>, I promised to share something I learned from the <a href="https://github.com/wbailey/code_katas/blob/master/calculator.rb">calculator kata</a>.
Here goes.</p>

<p>The calculator kata asks you to construct a <code>Calculator</code> class the instances of which are initialized with comma-delimited strings of integers.
Next you are asked, one by one, to create a series of instance methods—<code>#sum</code>, <code>#prod</code>, <code>#div</code>, <code>#diff</code>—for the class that perform arithmetic operations on the stored integers.</p>

<p>Starting with <code>#sum</code> only, I wrote the class, obviously enough, like this:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">expr</span>
</span><span class='line'>      <span class="vi">@expr</span> <span class="o">=</span> <span class="n">expr</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum</span>
</span><span class='line'>      <span class="vi">@expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\,/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding in another instance method, it made sense to move to conversion from string to array into the initialization method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">expr</span>
</span><span class='line'>      <span class="vi">@expr_array</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\,/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum</span>
</span><span class='line'>      <span class="vi">@expr_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">prod</span>
</span><span class='line'>      <span class="vi">@expr_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I went on to add analogous subtraction and division methods, and then I started to get an itch:
Could I avoid writing &#8220;inject&#8221; four times?
More importantly, could I find a way that to write this class that reflected the underlying similarity in function shared by these four methods?</p>

<p>On a kata-fuelled lark, I decided to write the code I <em>wished</em> would work, even though I had no reason to think it would.
I passed the arithmetic operation symbols into the methods as arguments, and then into the inject blocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Calculator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">expr</span>
</span><span class='line'>      <span class="vi">@expr_array</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\,/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sum</span>
</span><span class='line'>      <span class="n">inject_op</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">prod</span>
</span><span class='line'>      <span class="n">inject_op</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># etc.</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inject_op</span> <span class="n">op</span>
</span><span class='line'>      <span class="vi">@expr_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To my surprise <em>this actually does work</em>!!</p>

<p>My initial reaction was: Go Ruby!
And then: Thank you, kata.</p>

<p>But, finally, in the spirit of the aphorism that &#8220;magic is code you don&#8217;t understand yet,&#8221; I thought: How do these <code>&amp;</code> blocks work, anyway?
More on that in a later post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Kata and the Kata Gem]]></title>
    <link href="code-worrier.com/blog/kata/"/>
    <updated>2012-08-12T18:01:00-04:00</updated>
    <id>code-worrier.com/blog/kata</id>
    <content type="html"><![CDATA[<p>A <a href="http://codekata.pragprog.com/">code kata</a> is a small programming challenge on which a developer can practice her craft.
Kata have solutions in the sense that they set our requirements that a program can meet or fail to meet.
However, it is the process of thinking through the kata—and perhaps implementing it multiple times in different ways—that is intended to provoke learning.</p>

<p>Of course, you can&#8217;t learn anything form a kata unless you <em>do</em> the kata.
Enter the <a href="https://github.com/wbailey/kata">kata gem</a> by <a href="http://exposinggotchas.blogspot.com/">Wes Bailey</a>.</p>

<!-- more -->


<p>I learned about the gem from a lightning talk Bailey delivered at the inaugural <a href="http://steelcityrubyconf.org/">Steel City Ruby Conference</a> in Pittsburgh.
(Incidentally, SCRC was my first programming conference, and it was fantastic.
My experience there inspired this blog.)</p>

<p>The kata gem reduces the friction between you and actually sitting down to do kata.
It accomplishes this by presenting the kata requirements in bite-sized pieces on the command line.
The process of working through a kata via the gem resembles the work flow of test-driven development.
(To be clear, working with the gem in no way precludes <em>actual</em> TDD.)
This is no accident;
Bailey&#8217;s <a href="https://github.com/wbailey/kata/wiki/Authoring-a-Kata">DSL</a> for authoring kata is modeled after the <a href="http://rspec.info/">Rspec</a> testing framework.</p>

<p>Here are the first two steps of the calculator kata, which asks the coder to create a <code>Calculator</code> class, instances of which are initialized with strings of numbers:</p>

<pre><code>Create a calculator that is initialized with a string expression
- detail: The expression is of the form digits separated by commas: "1,2"
- detail: The expression is accessed by a method named expr
- detail: The expression can be reset for evaluation at any time without re-initializing
- example: Calculator.new "1,2"

Add Method
  Create an add method that sums the string expression
  - detail: The method will return the sum of the digits
  - detail: The expression can contain 0, 1 or 2 numbers
  - detail: Then empty string will return 0
  - example: "" computes to 0
  - example: "1" computes to 1
  - example: "1,2" computes to 3
</code></pre>

<p>&#8230;and so on. Yes, things start off simply, but simple problems allow for focus on technique and experimentation.
In my <a href="http://code-worrier.com/blog/passing-symbols">next post</a>, I&#8217;ll relate something I learned by experimenting with the calculator kata.</p>
]]></content>
  </entry>
  
</feed>
