<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | Code Worrier]]></title>
  <link href="http://code-worrier.com/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2014-05-29T14:58:20-04:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to be Stuck: 3 Coping Techniques]]></title>
    <link href="http://code-worrier.com/blog/3-ways-to-cope-with-being-stuck-coding/"/>
    <updated>2013-10-08T11:50:00-04:00</updated>
    <id>http://code-worrier.com/blog/3-ways-to-cope-with-being-stuck-coding</id>
    <content type="html"><![CDATA[<p><img src="/images/paradoxofinquiry.png" alt="The Paradox of Inquiry" /></p>

<!-- more -->


<p>Last week, I had the pleasure of giving a talk at <a href="http://flatironschool.com/">The Flatiron School</a> loosely based on <a href="/blog/why-rtfm-is-some-bullshit/">this old post</a>.
The talk is about the challanges of the early days of learning to code, and in particular about the process of learning to answer coding questions on the Internet (<a href="http://code-worrier.com/how-to-be-stuck">slide deck</a>).
This can be an excruciating process, because you need to know a lot to ask the right question and even more to understand the answer.
When you first start out, you have lots of questions and limited ability to get them effectively answered.</p>

<p>And, to make matters worse, you sometimes encounter bad attitudes when you ask "stupid" questions.</p>

<p><img src="/images/rtfmabbreviations.png" alt="RTFM and Friends" /></p>

<p>In the talk, I share three techniques for coping with being stuck that I've picked up from more experience developers over the years:</p>

<ol>
<li><p><strong>The 30 Minute Rule</strong>. Don't post a question on Stack Overflow, or bother your friend or colleague, until you've spent some time wallowing in your misery.
Google around. Read documentation. Write a script or dummy app to try to isolate your problem.
Maybe you'll find the answer yourself, which feels awesome, or maybe you won't.
Even if you don't, these periods of stuckness are productive in the long run.
This is how you build your research skills.
(Obviously, the 30 minute figure is arbitrary; figure out what works for you in the context.)
<img src="/images/halp.png" alt="Halp! I'm stuck!" /></p></li>
<li><p><strong>Rubber Ducky Debugging</strong>. This is a <a href="http://www.rubberduckdebugging.com/">well-known technique</a>, of course, but it bears repeating.
I think the reason that explaining a bug to another person helps you fix the bug is that it provokes your epistemic empathy.
When you think through a problem in your head, you tend to skip steps because <em>you</em> know what <em>you're</em> talking about -- or so you fool yourself into thinking.
Explaining the issue to someone else forces you to consider what someone who isn't intimately familiar with the problem would need to know, and in doing so, you fill in the gaps.
Often, the piece of the puzzle you were missing was hiding in one of those gaps.</p></li>
<li><p><strong>What did you Google?</strong> I've sometimes had the experience of asking a more experienced colleague for help with a problem I've been laboring over, only to receive, less than a minute later, a link to a page that answers my question.
When this happens, I get excited.
My colleage didn't jsut know something I didn't know; she knew how to find information I didn't know how to find -- and now I can learn her secrets.
When someone finds your answer when you couldn't, debrief them.
Try to disect their thought process so that next time you can do it yourself.</p></li>
</ol>


<p><img src="/images/answeringquestions.png" alt="Answering Coding Questions is a Skill" /></p>

<p>I'd love to hear about other techniques along these lines that you've picked up over the years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why RTFM is Some Bullshit]]></title>
    <link href="http://code-worrier.com/blog/why-rtfm-is-some-bullshit/"/>
    <updated>2012-08-29T10:48:00-04:00</updated>
    <id>http://code-worrier.com/blog/why-rtfm-is-some-bullshit</id>
    <content type="html"><![CDATA[<p>Learning to code is hard.</p>

<p>I'm not talking about the sense in which we're all still learning.
I mean when you first start out, the first few months.
During this period, every tiny bit of progress you make comes at the expense of an excruciating, time-consuming trial.</p>

<p>Personally, I had the great fortune of being around patient, empathic experts who helped me through the worst of it.
(Thanks <a href="https://twitter.com/binarycleric">Jon</a>, <a href="https://twitter.com/jackiekircher">Jackie</a>, <a href="https://twitter.com/laurenvoswinkel">Lauren</a>, et al!)
But not everyone is so lucky, and sooner or later a new programmer is bound to encounter <a href="http://en.wikipedia.org/wiki/RTFM">RTFM</a> and its new-fangled cousins, GIYF and LMGTFY.</p>

<!-- more -->


<p>Ever ask an elementary question about coding or about getting your development environment set up, and encounter one of the following responses?</p>

<ol>
<li>Contempt without assistance.</li>
<li>A link to a page you don't understand, with no explanation.</li>
<li>Overly brief assistance, with or without contempt.</li>
</ol>


<p>Whether or not they say it explicitly, the authors of these responses are expressing the RTFM sentiment.
And RTFM is bullshit.</p>

<p>I'm not the first person to say this, of course.
But as a programmer who is still very much in touch with what it's like to know nothing, I hope I am in a position to fortify the empathy of my more seasoned colleagues.</p>

<p>No one feels Meno's Paradox as viscerally as the Googling noob.</p>

<blockquote><p>And how will you inquire into a thing when you are wholly ignorant of what it is?
Even if you happen to bump right into it, how will you know it is the thing you didn't know?</p></blockquote>

<p>Answering technical questions via internet searches is a <em>skill</em> that takes <em>practice</em> to hone and which requires <em>background knowledge</em>.
Teaching yourself to code on the internet is a boostrapping process:
The more you learn, the better you get at learning it, and before you've learned very much, learning is really hard.</p>

<p>If you get stuck and you seek help on the internet, you need to know at least the following in order to have any hope of success:</p>

<ul>
<li>The nature of the problem your having.</li>
<li>The vocabulary that is commonly used to express this problem.</li>
<li>How to understand potential solutions to your problem.</li>
<li>How to implement potential solutions to see if they work.</li>
<li>What would constitute a solution's working.</li>
</ul>


<p>People who ask stupid technical questions might be stupid people.
Or, more likely, they might just be missing one or more of the pieces of knowledge they need to ask a smart quetsion and understand the answer.
It's not their fault they don't know these things.
They are beginners.
Learning to figure stuff our using documentation and Google is a skill they're developing along with all the others.</p>

<p>So, if someone asks a stupid question, consider taking the time answer it, fully and cheerfully.
Or don't answer at all.
Just remember: RTFM is some lazy, rude bullshit.</p>
]]></content>
  </entry>
  
</feed>
