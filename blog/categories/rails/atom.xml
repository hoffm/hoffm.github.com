<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Code Worrier]]></title>
  <link href="http://code-worrier.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2013-02-01T17:41:51-05:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Slugs in Rails without Gems]]></title>
    <link href="http://code-worrier.com/blog/custom-slugs-in-rails/"/>
    <updated>2013-02-01T16:48:00-05:00</updated>
    <id>http://code-worrier.com/blog/custom-slugs-in-rails</id>
    <content type="html"><![CDATA[<p>There are some
 <a href="https://github.com/norman/friendly_id" target="_blank">nice</a>
 <a href="https://github.com/Sutto/slugged" target="_blank">gems</a>
out there to help you create and manage human-readable slugs in Rails.
However, our requirements at Food52 were simple enough—and different enough from the standard case—that I thought I'd have a go at building a slugging system from scratch.</p>

<h2>The Problem</h2>

<p>As an example of the desired behavior, given that we want to use the attribute <code>name</code> to generate slugs for users, and given that my user id is 784 and my name is "Michael Hoffman", the slug for my user page should be:</p>

<blockquote><p><code>"784-michael-hoffman"</code></p></blockquote>

<p>(We leave the id in because we like it there!
It makes debugging easier and it allows us to use Active Record <code>find</code> to look up objects from params.)</p>

<p>Furthermore, we want our slugs to adapt gracefully to changing circumstances.
So, if my name changes, the slug should do...something smart.</p>

<p>Getting a little more abstract, our requirements are as follows:</p>

<!-- more -->


<ol>
<li>It should be possible to opt models in to custom slugging.</li>
<li>Custom slugs should have the form: <code>[:id]-[parameterized-string]</code>.</li>
<li>The string to be parameterized should be configurable per model.</li>
<li>Relevant changes in records' attributes should be reflected in the slug.</li>
<li>Records should have only one slug apiece, even as attribute values change.</li>
</ol>


<p>That's the problem.
In this post, I explain my solution.
Even if your custom slug needs are slightly different, I hope the general strategy might be useful.</p>

<h2>A Naive Attempt</h2>

<p>Before we begin, we need some background on how Rails handles slugs by default.
Active Record has an instance method <code>#to_param</code>, which Action Pack uses to create URLs.
Be default, <code>#to_param</code> returns the id of the object, converted to a string.
Thus, the default path to my user page (given standard resourceful routing) would be <code>"/users/784"</code>.
However, it is possible to customize slugs by overriding this method on a model-by-model basis.</p>

<p>So, the naive way to get the result we want would be to add a method like this one to the User model:</p>

<p>``` ruby app/model/user.rb
class User &lt; ActiveRecord::Base</p>

<p>  # [...]</p>

<p>  def to_param</p>

<pre><code>[id, name.parameterize].join("-")
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This approach meets the first four requirements, but there are two problems with it.
First, we're going to have to repeat this method (modulo the string to be parameterized) in all the models for which we want human-readable slugs.</p>

<p>Second, it fails to meet the fifth requirement.
Specifically, as users' names change, we will end up with many different addresses that point to the same content.
For instance, if I change my name to, say, "Michael Danger Hoffman", then Action-Pack-generated links to my profile will use <code>784-michael-danger-hoffman</code>, but anyone who'd previously copied the link, or bookmarked it, will be able to reach the same page by visiting the old slug.
Not only is that confusing to humans, it's also confusing to search bots.
Confusing search bots makes them <a href="http://www.geekologie.com/2011/09/22/stupid-robots.gif" target="_blank">sad</a>!</p>

<h2>A Better Solution</h2>

<p>Let's build on the naive solution to create a slugging system that can be applied succinctly across many models.
(We'll deal with the duplicate content problem in a another pass.)</p>

<p>Given a model, there are only two things we need to know about it with regard to slugging:</p>

<ul>
<li>Should it use custom slugs?</li>
<li>If so, what string should it use to create them?</li>
</ul>


<p>Ideally, we want a system that would allow us to opt models in to custom sluging, and simultaneously to specify how to calculate the strings those models should use to create slugs.</p>

<p>We can do this by adding a class method to <code>ActiveRecord::Base</code> that redefines <code>#to_param</code>.</p>

<p>``` ruby lib/app_utilities.rb
module ActiveRecordExtensions
  extend ActiveSupport::Concern</p>

<p>  module ClassMethods</p>

<pre><code># Override 'to_param'.
def custom_slugs_with(seed)
  self.redefine_method(:to_param) do
    [id, self.send(seed).parameterize].join("-")
  end
end
</code></pre>

<p>  end</p>

<p>  # Include above methods in all models.
  ActiveRecord::Base.send(:include, ActiveRecordExtensions)</p>

<p>end
```</p>

<p>We're going to want to make <code>::custom_slugs_with</code> available in all models, so let's require this file in an initializer:</p>

<p><code>ruby config/initializers/active_record_extensions.rb
require "app_util"
</code></p>

<p>Requiring this file will execute the include call, including <code>ActiveRecordExtensions</code> in <code>ActiveRecord::Base</code> (andmaking the module's methods available to Active Record's descendants).
The <code>::custom_slugs_with</code> method takes as an argument the name of an instance method that specifies the string to be used in the slug.
So, for instance, adding this line to the User model:</p>

<p>``` ruby app/model/user.rb
class User &lt; ActiveRecord::Base
  custom_slugs_with(:name)</p>

<p>  # [...]
end
```</p>

<p>will serve the same purpose as the <code>to_param</code> method in our original, naive solution.</p>

<p>When we want to retrieve the object from its slug, as will often be the case in controller actions, we can use a simple Active Record find. E.g.</p>

<p>``` ruby app/controllers/users_controller.rb
class UsersController &lt; ApplicationController</p>

<p>  #[...]</p>

<p>  def show</p>

<pre><code>@user = User.find(params[:id])
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Find is smart enough to parse strings like these and extract the correct id.</p>

<p>Lastly, if we wanted to use an explicit method to generate the string (instead of relying on the attribute, <code>name</code>), we could define that method in the User model and pass its symbolized name into the <code>::custom_slugs_with</code>.</p>

<h2>Keeping Slugs Consistent</h2>

<p>We still have a lingering problem.
The attributes from which these custom slugs are generated might change.
Moreover, we might be installing this system in an application that already has a different slugging system.
Both of these eventualities will lead us into to the uncomfortable situation I mentioned above: having multiple URLs that refer to the same content.
To get around this problem, let's treat the record's current slug—the one we get when we call <code>#to_param</code> on it—as cannonical.
Then, when we get a request for an out-of-date or incorrect slug, we can redirect the cannonical one.</p>

<p>We'll do this in basically the same way in every controller, so let's add our new code to the application controller.
The first method checks if the slug is connonical.
The second redirects to the cannonical slug, as retrieved by Action Pack.</p>

<p>``` ruby app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::Base</p>

<p>  #[...]</p>

<p>  ##
  # Check if the current slug is not the cannonical one.
  def bad_slug?(object)</p>

<pre><code>params[:id] != object.to_param
</code></pre>

<p>  end</p>

<p>  ##
  # 301 redirect to cannonical slug.
  def redirect_to_good_slug(object)</p>

<pre><code>  redirect_to params.merge({
                :controller =&gt; controller_name,
                :action =&gt; params[:action],
                :id =&gt; object.to_param,
                :status =&gt; :moved_permanently
              })
</code></pre>

<p>  end
end
```</p>

<p>Now we can call these methods from controller actions that we want to redirect non-cannonical slugs:</p>

<p>``` ruby app/controllers/users_controller.rb
class UsersController &lt; ApplicationController</p>

<p>  #[...]</p>

<p>  def show</p>

<pre><code>@user = User.find(params[:id])
redirect_to_good_slug(@user) and return if bad_slug?(@user)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This gets the job done.
Requests for <code>"/users/784-something-totally-weird"</code> will redirect to <code>"/users/784-Michael-Hoffman"</code> as desired.
Changing my name will change the target of this redirection.</p>

<p>I must admit, though, that I find this solution less than ideal.
It requires repeating the redirect-if-bad-slug code in many actions.
However, I have not yet found a better approach.
If you have one, I'd love to hear it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Ruby's 'next' keyword return?]]></title>
    <link href="http://code-worrier.com/blog/map-and-next/"/>
    <updated>2012-09-04T19:55:00-04:00</updated>
    <id>http://code-worrier.com/blog/map-and-next</id>
    <content type="html"><![CDATA[<p>Pop quiz, hotshot:
<strong>What does the following Ruby expression return?</strong></p>

<p><code>ruby
[1,2,3].map{ |n| next if n.even? ; 2*n }
</code></p>

<!-- more -->


<p>It turns out I'm not much of a hotshot, because this how I reasoned through this question while at work today:</p>

<ol>
<li><code>Array#map</code> evaluates the block for each member of the array and returns a new array of the returned values, in order.</li>
<li>When <code>n == 1</code> or <code>n == 3</code>, the block evaluates to <code>2*n</code>.</li>
<li>However, when <code>n == 2</code> we hit the <code>next</code> keyword and nothing gets evaluated.</li>
<li>Therefore this expression returns <code>[2,6]</code>.</li>
</ol>


<p>Reinforcing this line of reasoning, a very similar expression,</p>

<p><code>ruby
[1,2,3].each{ |n| next if n.even? ; puts 2*n }
</code></p>

<p>gives the analog of this result:
it prints "2" and then "6" and then return.
The iteration that hits <code>next</code> just gets skipped.
Analogously, the version with <code>map</code> should return <code>[2,6]</code></p>

<p><strong>Wrong!</strong></p>

<p>In fact, the answer to the quiz is...</p>

<p><code>ruby
[2, nil, 6]
</code></p>

<p>The error in the reasoning above is contained in premise (3).
It turns out that <strong>when <code>next</code> is evaluated, it returns <code>nil</code></strong>.</p>

<p>Similarly,</p>

<p><code>ruby
[1,2,3].map{ |n| 2*n if n.odd? }
</code></p>

<p>returns the same array, <code>[2, nil, 6]</code>, because <code>... if false</code> returns nil no matter what (syntactically valid) expression <code>...</code> is.</p>

<p>So, if you're using <code>map</code>, and you want to skip some elements, you can't just use <code>next</code> or <code>if</code>.
You also need to deal with the <code>nil</code>s when you're done, like this:</p>

<p><code>ruby
1,2,3].map{ |n| next if n.even? ; 2*n }.compact
</code></p>

<p>Alternatively—although it's probably more expensive—you could select the elements you want before proceeding with the operations you want to perform on them:</p>

<p><code>ruby
[1,2,3].reject{ |n| n.even? }.map{ |n| 2*n }
</code></p>

<p>Let me know in the comments if you can think of a generalizable implementation that's more elegant than either of these.
In the meantime, may you never make the same mistake I made!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: More Legible Output with 'Kernel#y']]></title>
    <link href="http://code-worrier.com/blog/more-legible-output-with-y/"/>
    <updated>2012-08-30T14:24:00-04:00</updated>
    <id>http://code-worrier.com/blog/more-legible-output-with-y</id>
    <content type="html"><![CDATA[<p>Ever tried to get a sense of an ActiveRecord object by squinting though output like this?</p>

<p>```</p>

<blockquote><blockquote><p>User.find_by_login("Michael Hoffman").recipes.last
=> #&lt;Recipe id: 18891, title: "Pasta with Lemon-Parmesan Butte
r", created_at: "2012-08-29 00:03:55", updated_at: "2012-08-29
16:20:58", description: "I was walking by a little pizzeria in
the East Vill...", recipe_category_id: 36, serving_size: "4 as
a pasta course, 2 as a main", user_id: 784, editors_pick: fals
e, editors_comments: "", label: "pasta_with_lemonparmesan_butt
er", flag_inappropriate: false, wine_id: nil, recipe_style: "a
b", varietal_id: nil, rating_average: 0, makes_serves: "Serves
", flag_inappropriate_comments: nil, sommelier_comments: nil,
comments_count: 1, is_winner: false, interest: 1, is_finalist:
nil, new_categories_added: nil, admin_categorization_note: nil</p></blockquote>

<p>```
Yuck.</p></blockquote>

<!-- more -->


<p>Luckily, there's a super simple way to get some nicer formatting.
The <code>Kernel</code> module has a private instance method <code>#y</code> which will print out an active record object (or anything else) as YAML.
Check it out:</p>

<p>```</p>

<blockquote><blockquote><p>y User.find_by_login("Michael Hoffman").recipes.last
--- !ruby/ActiveRecord:Recipe
attributes:
  sommelier_comments:
  recipe_style: ab
  updated_at: 2012-08-29 16:20:58
  admin_categorization_note:
  is_finalist:
  is_winner: "0"
  editors_comments: ""
  serving_size: 4 as a pasta course, 2 as a main
  title: Pasta with Lemon-Parmesan Butter
  interest: "1"
  editors_pick: "0"
  recipe_category_id: "36"
  rating_average: "0"
  id: "18891"
  new_categories_added:
  flag_inappropriate_comments:
  wine_id:
  description: "I was walking by a little pizzeria in the East</p>

<pre><code>Village - one I've never been to and may never go to - and
I slowed my gait to glance at the menu. My eyes happened t
o land on a pasta dish. I don't remember exactly what it w
as called, but it involved lemon and parmesan, and not muc
h else. Lemon! So obvious. Why had I never thought of that
? The next night I made this for dinner."
</code></pre>

<p>  comments_count: "1"
  makes_serves: Serves
  varietal_id:
  user_id: "784"
  label: pasta_with_lemonparmesan_butter
  flag_inappropriate: "0"
  created_at: 2012-08-29 00:03:55
=> nil
```</p></blockquote></blockquote>

<p>Notice that, in addition to producing more legible formatting, <code>#y</code> does not truncate values, so we get to see the whole description of the recipe.
Another great use case for this method is visualizing nested hashes and arrays.</p>

<p>```</p>

<blockquote><blockquote><p>a = {:animals => {:mammals => [:dog, :cat, :narwhal], :fish => [:tuna, :shark] }, :fruits => [:plum, :peach, :banana]}
=> {:fruits=>[:plum, :peach, :banana], :animals=>{:mammals=>[:dog, :cat, :narwhal], :fish=>[:tuna, :shark]}}</p>

<h2>y a</h2>

<p>:fruits:
- :plum
- :peach
- :banana
:animals:
  :mammals:
  - :dog
  - :cat
  - :narwhal
  :fish:
  - :tuna
  - :shark
=> nil
```</p></blockquote></blockquote>

<p>Nice, huh?</p>

<p>One caveat:
<a href="http://stackoverflow.com/questions/11571801/rails-console-y-helper-returns-nameerror-rather-than-yaml-formatting-output/11572045#11572045">Apparently</a> this method relies on the <a href="http://stackoverflow.com/a/11572045">Syck YAML parser</a>.
For this reason, it won't immediately work out of the box with Ruby 1.9.3, which uses the <a href="https://github.com/tenderlove/psych/">Psych parser</a> by default.
If you're using 1.9.3 and you want to play around with <code>Kernel#y</code>, run <code>YAML::ENGINE.yamler = 'syck'</code> to change parsers.</p>

<p>And a question: I'd like to know how to get <code>#y</code> to print out ActiveRecord attributes in the same order as they are normally displayed.</p>

<p>(By the way, I highly recommend trying out <a href="http://food52.com/recipes/18891_pasta_with_lemonparmesan_butter">the recipe</a> mentioned above.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Helper methods in the Rails console?]]></title>
    <link href="http://code-worrier.com/blog/helper-methods-in-console/"/>
    <updated>2012-08-14T11:53:00-04:00</updated>
    <id>http://code-worrier.com/blog/helper-methods-in-console</id>
    <content type="html"><![CDATA[<p>So you want to mess around with a helper method in the console?
It's super simple, as I just learned <a href="http://stackoverflow.com/questions/151030/how-do-i-call-controller-view-methods-from-the-console-in-rails">here</a> from <a href="http://caiochassot.com/">kch</a>.
Basically, Rails gets a bit <a href="http://nextlol.com/images/37181-yo-dawg-hotdawg.jpg">yo dawg</a> and provides a helper for your helpers—called "helper".</p>

<p>Here's an example. Suppose you have a helper module like the following:</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cars_helper.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CarsHelper</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def put_a_car_in(location)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">location</span> <span class="o">==</span> <span class="s2">&quot;your car&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;So you can drive while you drive!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Fire up a Rails console, and to create the helper-helper, all you have to do in include the module:</p>

<p>```</p>

<blockquote><blockquote><p>include CarsHelper
=> Object</p>

<p>helper.put_a_car_in("your car")
So you can drive while you drive!
```</p></blockquote></blockquote>

<p>I hope this has been helpful. (Sorry, can't help myself.)</p>

<p>Ok, I'm done.</p>
]]></content>
  </entry>
  
</feed>
