<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: QuickTip | Code Worrier]]></title>
  <link href="http://code-worrier.com/blog/categories/quicktip/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2013-03-29T09:51:03-04:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to checkout the last git branch you were on]]></title>
    <link href="http://code-worrier.com/blog/git-checkout-dash/"/>
    <updated>2013-03-07T11:10:00-05:00</updated>
    <id>http://code-worrier.com/blog/git-checkout-dash</id>
    <content type="html"><![CDATA[<p>Checking out the last branch you were on is as simple as <code>git checkout -</code>.</p>

<p><code>bash
11:13:14-hoffm~/src/food52 (develop)$ git checkout master
Switched to branch 'master'
11:13:21-hoffm~/src/food52 (master)$ git checkout -
Switched to branch 'develop'
11:13:23-hoffm~/src/food52 (develop)$ git checkout -
Switched to branch 'master'
</code></p>

<p><a href="http://i.imgur.com/yUNhh.gif">Boom</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put Your Git Branch in Your Bash Prompt]]></title>
    <link href="http://code-worrier.com/blog/git-branch-in-bash-prompt/"/>
    <updated>2013-01-24T21:54:00-05:00</updated>
    <id>http://code-worrier.com/blog/git-branch-in-bash-prompt</id>
    <content type="html"><![CDATA[<p>Lots of folks were interested in getting <a href="http://code-worrier.com/blog/autocomplete-git/">git autocomplete</a> going in bash, so I thought I'd offer another useful git/bash tip.
This one was suggested by <a href="http://twitter.com/S_2K">Stephan</a> in the comments of that earlier post.</p>

<p>If you're using git properly and collaborating on a project, chances are you find yourself changing branches often.
This can be quite disorienting.
You deploy from the master branch, then get back to that bug fix you were about to work except for—whoops!—now you commited that fix to master and have to <a href="http://d22zlbw5ff7yk5.cloudfront.net/images/cm-23141-050624c7335479.gif">back away slowly</a>.
Confusions like this one can easily be avoided by putting you branch name front-and-center: at the end of your bash prompt.
Here's how.</p>

<!-- more -->


<p>Get the <code>git-promt.sh</code> script <a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">here</a>.
Put it somewhere like <code>~/.git-prompt.sh</code>.
If you want to be all CLI about it, you could just run:</p>

<p><code>bash
curl https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.git-prompt.sh
</code></p>

<p>Now modify your your bash profile (it's at <code>~/.bash-profile</code>, in case you're new to this stuff).
Before the part of the file that declares what your prompt will look like (<code>PS1=[...]</code>), load in the script you just downloaded, like so:</p>

<p>``` bash</p>

<h1>Load in the git branch prompt script.</h1>

<p>source ~/.git-prompt.sh
```</p>

<p>Now add <code>\$(__git_ps1)</code> to your prompt declaration.
You can put it wherever you like, but I think it's best suited for the very end, right before the final dollar sign (<code>\$</code>)
If you want to get all fancy, you can make it a pretty color.
My declaration looks like this:</p>

<p><code>bash
PS1="\[$GREEN\]\t\[$RED\]-\[$BLUE\]\u\[$YELLOW\]\[$YELLOW\]\w\[\033[m\]\[$MAGENTA\]\$(__git_ps1)\[$WHITE\]\$ "
</code></p>

<p>(See <a href="https://wiki.archlinux.org/index.php/Color_Bash_Prompt">here</a> for color definitions.)</p>

<p>This declaration results in a prompt looks like this when I'm in the directory <code>~/src/food52</code> and on the branch <code>develop</code>:</p>

<p><img src="http://f.cl.ly/items/0b3e1Q2R1I3b2T2a1q03/Screen%20Shot%202013-01-25%20at%2010.31.45%20AM.png" alt="" /></p>

<p>That's it. Never git lost again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Autocomplete Git Commands and Branch Names in Bash]]></title>
    <link href="http://code-worrier.com/blog/autocomplete-git/"/>
    <updated>2012-09-09T21:44:00-04:00</updated>
    <id>http://code-worrier.com/blog/autocomplete-git</id>
    <content type="html"><![CDATA[<p>In bash in Mac OS X, you can use [TAB] to autocomplete file paths.
Wouldn't if be nice if you could do the same with git commands and branch names?</p>

<p>You can.
Here's how.</p>

<!-- more -->


<p>First get the <code>git-completion.bash</code> script (view it <a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">here</a>) and put it in your home directory:</p>

<p><code>bash
curl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
</code></p>

<p>Next, add the following lines to your <code>.bash_profile</code>.
This tells bash to execute the git autocomplete script if it exists.</p>

<p><code>bash
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi
</code></p>

<p>Now open a new shell, <code>cd</code> into a git repo, and start typing a git command.
You should find that [TAB] now autocompletes git commands and git branch names.</p>

<p>For example, if you type <code>git</code> then add a space and hit [TAB], you'll get a readout like this, which lists all available git commands:</p>

<p><code>bash
add                 filter-branch       reflog
am                  format-patch        relink
annotate            fsck                remote
apply               gc                  repack
archive             get-tar-commit-id   replace
bisect              grep                request-pull
blame               gui                 reset
branch              help                revert
bundle              imap-send           rm
checkout            init                send-email
cherry              instaweb            shortlog
cherry-pick         log                 show
citool              merge               show-branch
clean               mergetool           stage
clone               mv                  stash
commit              name-rev            status
config              notes               submodule
describe            p4                  svn
diff                pull                tag
difftool            push                whatchanged
fetch               rebase
</code></p>

<p>Now to learn what some of these more exotic git commands do!
What's your favorite git command?</p>

<p>(I learned this way of installing <code>git-completion.bash</code> <a href="http://apple.stackexchange.com/questions/55875/how-can-i-get-git-to-autocomplete-e-g-branches-at-the-command-line/55886#55886">here</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Ruby's 'next' keyword return?]]></title>
    <link href="http://code-worrier.com/blog/map-and-next/"/>
    <updated>2012-09-04T19:55:00-04:00</updated>
    <id>http://code-worrier.com/blog/map-and-next</id>
    <content type="html"><![CDATA[<p>Pop quiz, hotshot:
<strong>What does the following Ruby expression return?</strong></p>

<p><code>ruby
[1,2,3].map{ |n| next if n.even? ; 2*n }
</code></p>

<!-- more -->


<p>It turns out I'm not much of a hotshot, because this how I reasoned through this question while at work today:</p>

<ol>
<li><code>Array#map</code> evaluates the block for each member of the array and returns a new array of the returned values, in order.</li>
<li>When <code>n == 1</code> or <code>n == 3</code>, the block evaluates to <code>2*n</code>.</li>
<li>However, when <code>n == 2</code> we hit the <code>next</code> keyword and nothing gets evaluated.</li>
<li>Therefore this expression returns <code>[2,6]</code>.</li>
</ol>


<p>Reinforcing this line of reasoning, a very similar expression,</p>

<p><code>ruby
[1,2,3].each{ |n| next if n.even? ; puts 2*n }
</code></p>

<p>gives the analog of this result:
it prints "2" and then "6" and then return.
The iteration that hits <code>next</code> just gets skipped.
Analogously, the version with <code>map</code> should return <code>[2,6]</code></p>

<p><strong>Wrong!</strong></p>

<p>In fact, the answer to the quiz is...</p>

<p><code>ruby
[2, nil, 6]
</code></p>

<p>The error in the reasoning above is contained in premise (3).
It turns out that <strong>when <code>next</code> is evaluated, it returns <code>nil</code></strong>.</p>

<p>Similarly,</p>

<p><code>ruby
[1,2,3].map{ |n| 2*n if n.odd? }
</code></p>

<p>returns the same array, <code>[2, nil, 6]</code>, because <code>... if false</code> returns nil no matter what (syntactically valid) expression <code>...</code> is.</p>

<p>So, if you're using <code>map</code>, and you want to skip some elements, you can't just use <code>next</code> or <code>if</code>.
You also need to deal with the <code>nil</code>s when you're done, like this:</p>

<p><code>ruby
1,2,3].map{ |n| next if n.even? ; 2*n }.compact
</code></p>

<p>Alternatively—although it's probably more expensive—you could select the elements you want before proceeding with the operations you want to perform on them:</p>

<p><code>ruby
[1,2,3].reject{ |n| n.even? }.map{ |n| 2*n }
</code></p>

<p>Let me know in the comments if you can think of a generalizable implementation that's more elegant than either of these.
In the meantime, may you never make the same mistake I made!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: More Legible Output with 'Kernel#y']]></title>
    <link href="http://code-worrier.com/blog/more-legible-output-with-y/"/>
    <updated>2012-08-30T14:24:00-04:00</updated>
    <id>http://code-worrier.com/blog/more-legible-output-with-y</id>
    <content type="html"><![CDATA[<p>Ever tried to get a sense of an ActiveRecord object by squinting though output like this?</p>

<p>```</p>

<blockquote><blockquote><p>User.find_by_login("Michael Hoffman").recipes.last
=> #&lt;Recipe id: 18891, title: "Pasta with Lemon-Parmesan Butte
r", created_at: "2012-08-29 00:03:55", updated_at: "2012-08-29
16:20:58", description: "I was walking by a little pizzeria in
the East Vill...", recipe_category_id: 36, serving_size: "4 as
a pasta course, 2 as a main", user_id: 784, editors_pick: fals
e, editors_comments: "", label: "pasta_with_lemonparmesan_butt
er", flag_inappropriate: false, wine_id: nil, recipe_style: "a
b", varietal_id: nil, rating_average: 0, makes_serves: "Serves
", flag_inappropriate_comments: nil, sommelier_comments: nil,
comments_count: 1, is_winner: false, interest: 1, is_finalist:
nil, new_categories_added: nil, admin_categorization_note: nil</p></blockquote>

<p>```
Yuck.</p></blockquote>

<!-- more -->


<p>Luckily, there's a super simple way to get some nicer formatting.
The <code>Kernel</code> module has a private instance method <code>#y</code> which will print out an active record object (or anything else) as YAML.
Check it out:</p>

<p>```</p>

<blockquote><blockquote><p>y User.find_by_login("Michael Hoffman").recipes.last
--- !ruby/ActiveRecord:Recipe
attributes:
  sommelier_comments:
  recipe_style: ab
  updated_at: 2012-08-29 16:20:58
  admin_categorization_note:
  is_finalist:
  is_winner: "0"
  editors_comments: ""
  serving_size: 4 as a pasta course, 2 as a main
  title: Pasta with Lemon-Parmesan Butter
  interest: "1"
  editors_pick: "0"
  recipe_category_id: "36"
  rating_average: "0"
  id: "18891"
  new_categories_added:
  flag_inappropriate_comments:
  wine_id:
  description: "I was walking by a little pizzeria in the East</p>

<pre><code>Village - one I've never been to and may never go to - and
I slowed my gait to glance at the menu. My eyes happened t
o land on a pasta dish. I don't remember exactly what it w
as called, but it involved lemon and parmesan, and not muc
h else. Lemon! So obvious. Why had I never thought of that
? The next night I made this for dinner."
</code></pre>

<p>  comments_count: "1"
  makes_serves: Serves
  varietal_id:
  user_id: "784"
  label: pasta_with_lemonparmesan_butter
  flag_inappropriate: "0"
  created_at: 2012-08-29 00:03:55
=> nil
```</p></blockquote></blockquote>

<p>Notice that, in addition to producing more legible formatting, <code>#y</code> does not truncate values, so we get to see the whole description of the recipe.
Another great use case for this method is visualizing nested hashes and arrays.</p>

<p>```</p>

<blockquote><blockquote><p>a = {:animals => {:mammals => [:dog, :cat, :narwhal], :fish => [:tuna, :shark] }, :fruits => [:plum, :peach, :banana]}
=> {:fruits=>[:plum, :peach, :banana], :animals=>{:mammals=>[:dog, :cat, :narwhal], :fish=>[:tuna, :shark]}}</p>

<h2>y a</h2>

<p>:fruits:
- :plum
- :peach
- :banana
:animals:
  :mammals:
  - :dog
  - :cat
  - :narwhal
  :fish:
  - :tuna
  - :shark
=> nil
```</p></blockquote></blockquote>

<p>Nice, huh?</p>

<p>One caveat:
<a href="http://stackoverflow.com/questions/11571801/rails-console-y-helper-returns-nameerror-rather-than-yaml-formatting-output/11572045#11572045">Apparently</a> this method relies on the <a href="http://stackoverflow.com/a/11572045">Syck YAML parser</a>.
For this reason, it won't immediately work out of the box with Ruby 1.9.3, which uses the <a href="https://github.com/tenderlove/psych/">Psych parser</a> by default.
If you're using 1.9.3 and you want to play around with <code>Kernel#y</code>, run <code>YAML::ENGINE.yamler = 'syck'</code> to change parsers.</p>

<p>And a question: I'd like to know how to get <code>#y</code> to print out ActiveRecord attributes in the same order as they are normally displayed.</p>

<p>(By the way, I highly recommend trying out <a href="http://food52.com/recipes/18891_pasta_with_lemonparmesan_butter">the recipe</a> mentioned above.)</p>
]]></content>
  </entry>
  
</feed>
