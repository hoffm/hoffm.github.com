<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Code Worrier]]></title>
  <link href="http://code-worrier.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2013-03-29T09:51:03-04:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Bisect: Your Friend in Times of Need]]></title>
    <link href="http://code-worrier.com/blog/git-bisect-basics/"/>
    <updated>2013-03-17T11:38:00-04:00</updated>
    <id>http://code-worrier.com/blog/git-bisect-basics</id>
    <content type="html"><![CDATA[<p>Git bisect is like CPR or a fire extinguisher:
You shouldn't need it very often, but when you, it might just save a life.</p>

<p>In case you are not familiar with its splendor, git bisect is a tool for pinpointing the commit that caused a change.
Usually, the change you're interested in is the introduction of a bug.
Bisect is handy when, for instance, you discover a regression and you don't know what caused it or exactly how long it's been around.
Bisect isolates the offending commit with logarithmic efficiency.
It accomplishes this by performing a binary search of the commits on your branch, dividing and conquering until only one commit remains.</p>

<!-- more -->


<p>The basic version of the process is simple.
You provide git with a good commit (one you know is after the change) and a bad commit (one you know is before the change).
Git then asks you a series of yes-or-no questions of the form: How about this other commit here—is it good?
Approximately log-base-2 of the number of questions in your good-bad interval later, you have your culprit.</p>

<p>Here are the commands for navigating through this process:</p>

<p>```bash
$ git bisect start</p>

<pre><code># "Let's do this thing."
</code></pre>

<p>$ git bisect bad</p>

<pre><code># "Hey, git, the current commit bad."
</code></pre>

<p>$ git bisect bad [commit hash or tag name]</p>

<pre><code># "This commit hash refers to a bad commit."
# (Only one of the previous two commands is required.)
</code></pre>

<p>$ git bisect good [commit or hash]</p>

<pre><code># "Here's an earlier point at which I know things were good."
</code></pre>

<p>```</p>

<p>At this point, Git will proceed to checkout commits for you.
Your job is to give the thumbs up or thumbs down, Roman-emperor style.</p>

<p>```bash
$ git bisect good</p>

<pre><code># "This commit is before the change; look later."
</code></pre>

<p>$ git bisect bad</p>

<pre><code># "This commit is after the change; look earlier."
</code></pre>

<p>```</p>

<p>At each step you'll need to do whatever it is you need to do to check which side of the change the commit is on.
If you're working on a Rails app, this might involve running <code>rake db:migrate</code> and <code>bundle install</code>, and then checking whether a particular test passes or a particular behavior of your application is present.</p>

<p>When git zeroes in on its target, it will spit out a message telling you what it found, e.g.</p>

<p>```bash
341c8a0f26e67cf8735552cf8f2b945b80ccb84b is the first bad commit
commit 341c8a0f26e67cf8735552cf8f2b945b80ccb84b
Author: hoffm <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x6d;&#x40;&#104;&#x6f;&#102;&#46;&#x66;&#x6d;">&#x6d;&#x40;&#x68;&#x6f;&#x66;&#46;&#102;&#x6d;</a>
Date:   Thu Mar 17 11:19:10 2013 -0500</p>

<pre><code>Draft of git bisect post.
</code></pre>

<p>```</p>

<p>At this point, you'll probably want to get out of bisect mode and back onto your working branch.
To do this, run</p>

<p><code>bash
$ git bisect reset
</code></p>

<p>That's all you really need to know to start using git bisect.</p>

<p>In researching this post, though, I came across some additional commands that are worth learning.
First, if during the bisect process, git lands you on a particularly awkward commit—e.g. one for which the needed environment is hard to replicate from your present position—you can run <code>git bisect skip</code> and git will offer you a different commit to test.</p>

<p>Second—and way cooler—you can automate your yes/no decisions by feeding a custom script to <code>git bisect run</code>.
Git will run the script at every decision point, and will take an exit code of 0 to mean good, and anything else (except 125) to mean bad (details <a href="https://www.kernel.org/pub/software/scm/git/docs/git-bisect.html#_bisect_run">here</a>).
Test frameworks like RSpec <a href="https://www.relishapp.com/rspec/rspec-core/v/2-13/docs/command-line/exit-status">exit with 0</a> only when all tests pass (or none are run), so if you're trying to identify the commit that caused a test failure, this is your tool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to checkout the last git branch you were on]]></title>
    <link href="http://code-worrier.com/blog/git-checkout-dash/"/>
    <updated>2013-03-07T11:10:00-05:00</updated>
    <id>http://code-worrier.com/blog/git-checkout-dash</id>
    <content type="html"><![CDATA[<p>Checking out the last branch you were on is as simple as <code>git checkout -</code>.</p>

<p><code>bash
11:13:14-hoffm~/src/food52 (develop)$ git checkout master
Switched to branch 'master'
11:13:21-hoffm~/src/food52 (master)$ git checkout -
Switched to branch 'develop'
11:13:23-hoffm~/src/food52 (develop)$ git checkout -
Switched to branch 'master'
</code></p>

<p><a href="http://i.imgur.com/yUNhh.gif">Boom</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put Your Git Branch in Your Bash Prompt]]></title>
    <link href="http://code-worrier.com/blog/git-branch-in-bash-prompt/"/>
    <updated>2013-01-24T21:54:00-05:00</updated>
    <id>http://code-worrier.com/blog/git-branch-in-bash-prompt</id>
    <content type="html"><![CDATA[<p>Lots of folks were interested in getting <a href="http://code-worrier.com/blog/autocomplete-git/">git autocomplete</a> going in bash, so I thought I'd offer another useful git/bash tip.
This one was suggested by <a href="http://twitter.com/S_2K">Stephan</a> in the comments of that earlier post.</p>

<p>If you're using git properly and collaborating on a project, chances are you find yourself changing branches often.
This can be quite disorienting.
You deploy from the master branch, then get back to that bug fix you were about to work except for—whoops!—now you commited that fix to master and have to <a href="http://d22zlbw5ff7yk5.cloudfront.net/images/cm-23141-050624c7335479.gif">back away slowly</a>.
Confusions like this one can easily be avoided by putting you branch name front-and-center: at the end of your bash prompt.
Here's how.</p>

<!-- more -->


<p>Get the <code>git-promt.sh</code> script <a href="https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh">here</a>.
Put it somewhere like <code>~/.git-prompt.sh</code>.
If you want to be all CLI about it, you could just run:</p>

<p><code>bash
curl https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.git-prompt.sh
</code></p>

<p>Now modify your your bash profile (it's at <code>~/.bash-profile</code>, in case you're new to this stuff).
Before the part of the file that declares what your prompt will look like (<code>PS1=[...]</code>), load in the script you just downloaded, like so:</p>

<p>``` bash</p>

<h1>Load in the git branch prompt script.</h1>

<p>source ~/.git-prompt.sh
```</p>

<p>Now add <code>\$(__git_ps1)</code> to your prompt declaration.
You can put it wherever you like, but I think it's best suited for the very end, right before the final dollar sign (<code>\$</code>)
If you want to get all fancy, you can make it a pretty color.
My declaration looks like this:</p>

<p><code>bash
PS1="\[$GREEN\]\t\[$RED\]-\[$BLUE\]\u\[$YELLOW\]\[$YELLOW\]\w\[\033[m\]\[$MAGENTA\]\$(__git_ps1)\[$WHITE\]\$ "
</code></p>

<p>(See <a href="https://wiki.archlinux.org/index.php/Color_Bash_Prompt">here</a> for color definitions.)</p>

<p>This declaration results in a prompt looks like this when I'm in the directory <code>~/src/food52</code> and on the branch <code>develop</code>:</p>

<p><img src="http://f.cl.ly/items/0b3e1Q2R1I3b2T2a1q03/Screen%20Shot%202013-01-25%20at%2010.31.45%20AM.png" alt="" /></p>

<p>That's it. Never git lost again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Autocomplete Git Commands and Branch Names in Bash]]></title>
    <link href="http://code-worrier.com/blog/autocomplete-git/"/>
    <updated>2012-09-09T21:44:00-04:00</updated>
    <id>http://code-worrier.com/blog/autocomplete-git</id>
    <content type="html"><![CDATA[<p>In bash in Mac OS X, you can use [TAB] to autocomplete file paths.
Wouldn't if be nice if you could do the same with git commands and branch names?</p>

<p>You can.
Here's how.</p>

<!-- more -->


<p>First get the <code>git-completion.bash</code> script (view it <a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash">here</a>) and put it in your home directory:</p>

<p><code>bash
curl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
</code></p>

<p>Next, add the following lines to your <code>.bash_profile</code>.
This tells bash to execute the git autocomplete script if it exists.</p>

<p><code>bash
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi
</code></p>

<p>Now open a new shell, <code>cd</code> into a git repo, and start typing a git command.
You should find that [TAB] now autocompletes git commands and git branch names.</p>

<p>For example, if you type <code>git</code> then add a space and hit [TAB], you'll get a readout like this, which lists all available git commands:</p>

<p><code>bash
add                 filter-branch       reflog
am                  format-patch        relink
annotate            fsck                remote
apply               gc                  repack
archive             get-tar-commit-id   replace
bisect              grep                request-pull
blame               gui                 reset
branch              help                revert
bundle              imap-send           rm
checkout            init                send-email
cherry              instaweb            shortlog
cherry-pick         log                 show
citool              merge               show-branch
clean               mergetool           stage
clone               mv                  stash
commit              name-rev            status
config              notes               submodule
describe            p4                  svn
diff                pull                tag
difftool            push                whatchanged
fetch               rebase
</code></p>

<p>Now to learn what some of these more exotic git commands do!
What's your favorite git command?</p>

<p>(I learned this way of installing <code>git-completion.bash</code> <a href="http://apple.stackexchange.com/questions/55875/how-can-i-get-git-to-autocomplete-e-g-branches-at-the-command-line/55886#55886">here</a>.)</p>
]]></content>
  </entry>
  
</feed>
