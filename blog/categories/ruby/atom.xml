<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Code Worrier]]></title>
  <link href="http://code-worrier.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2012-09-30T15:24:23-04:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A tiny benchmarking utility]]></title>
    <link href="http://code-worrier.com/blog/tiny-benchmarking/"/>
    <updated>2012-09-30T14:54:00-04:00</updated>
    <id>http://code-worrier.com/blog/tiny-benchmarking</id>
    <content type="html"><![CDATA[<p>While working on a longer (forthcoming) post, I wrote a little benchmakring utility that I want to share.
Here it is:</p>

<p>```ruby tiny_timer.rb
module TinyTimer
  def self.benchmark(samples=10)</p>

<pre><code>times = []

samples.times do
  start = Time.now
  yield
  times &lt;&lt; (Time.now - start)
end

times.sum / samples.to_f
</code></pre>

<p>  end
end
```</p>

<!-- more -->


<p>As you can see, this method runs a specified number of trials of a block of code and returns the average time in seconds it took to execute the block.
Usage examples:</p>

<p>```bash</p>

<blockquote><blockquote><p>require 'tiny_timer'
=> ["TinyTimer"]
TinyTimer.benchmark{ (0..100000).map{rand(10)}.sort }
=> 0.0670641
TinyTimer.benchmark(100){ 2**1000000 }
=> 0.00841815
```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invoke a Rake Task from Another Task]]></title>
    <link href="http://code-worrier.com/blog/embedded-rake-tasks/"/>
    <updated>2012-09-25T17:02:00-04:00</updated>
    <id>http://code-worrier.com/blog/embedded-rake-tasks</id>
    <content type="html"><![CDATA[<p>You can invoke a rake task from another rake task.
Here's how:</p>

<p>```ruby examples.rake
namespace :examples do</p>

<p>  desc "Inner task."
  task :inner_task => :environment do</p>

<pre><code># Some code that accomplishes a task.
</code></pre>

<p>  end</p>

<p>  desc "Outer task."
  task :outer_task do</p>

<pre><code># Some code.
Rake::Task['examples:inner_task'].execute #Execute innter task.
# Some other code.
</code></pre>

<p>  end</p>

<p>end
```</p>

<!-- more -->


<p>Now when you execute <code>rake examples:outer_task</code>, you will execute the inner task in whatever context you placed it.
Using this contruction allows you to break down unweildy tasks into smaller ones, which perhaps you'll want to reuse in different contexts elsewhere.</p>

<p>Here's a toy examples that actually works:</p>

<p>```ruby toys.rake
namespace :toys do</p>

<p>  desc "Inner task: Square the value."
  task :square do</p>

<pre><code>@value *= @value
</code></pre>

<p>  end</p>

<p>  desc "Outer task: Initialize the value and square thrice."
  task :square_three_times do</p>

<pre><code>@value = 2
3.times{Rake::Task['toys:square'].execute}
puts "The value is #{@value}."
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Running this in the shell, we get:</p>

<p><code>bash
$ rake toys:square_three_times --trace
** Invoke toys:square_three_times (first_time)
** Execute toys:square_three_times
** Execute toys:square
** Execute toys:square
** Execute toys:square
The value is 256.
</code></p>

<p>And yes, I know you're thinking it now: rake tasks can call themselves quite happily.</p>

<p>You can also invoke rake tasks from within ActiveRecord migrations.
This can come in handy when you want to initialize a bunch of data immeidately after altering the database schema.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Ruby's 'next' keyword return?]]></title>
    <link href="http://code-worrier.com/blog/map-and-next/"/>
    <updated>2012-09-04T19:55:00-04:00</updated>
    <id>http://code-worrier.com/blog/map-and-next</id>
    <content type="html"><![CDATA[<p>Pop quiz, hotshot:
<strong>What does the following Ruby expression return?</strong></p>

<p><code>ruby
[1,2,3].map{ |n| next if n.even? ; 2*n }
</code></p>

<!-- more -->


<p>It turns out I'm not much of a hotshot, because this how I reasoned through this question while at work today:</p>

<ol>
<li><code>Array#map</code> evaluates the block for each member of the array and returns a new array of the returned values, in order.</li>
<li>When <code>n == 1</code> or <code>n == 3</code>, the block evaluates to <code>2*n</code>.</li>
<li>However, when <code>n == 2</code> we hit the <code>next</code> keyword and nothing gets evaluated.</li>
<li>Therefore this expression returns <code>[2,6]</code>.</li>
</ol>


<p>Reinforcing this line of reasoning, a very similar expression,</p>

<p><code>ruby
[1,2,3].each{ |n| next if n.even? ; puts 2*n }
</code></p>

<p>gives the analog of this result:
it prints "2" and then "6" and then return.
The iteration that hits <code>next</code> just gets skipped.
Analogously, the version with <code>map</code> should return <code>[2,6]</code></p>

<p><strong>Wrong!</strong></p>

<p>In fact, the answer to the quiz is...</p>

<p><code>ruby
[2, nil, 6]
</code></p>

<p>The error in the reasoning above is contained in premise (3).
It turns out that <strong>when <code>next</code> is evaluated, it returns <code>nil</code></strong>.</p>

<p>Similarly,</p>

<p><code>ruby
[1,2,3].map{ |n| 2*n if n.odd? }
</code></p>

<p>returns the same array, <code>[2, nil, 6]</code>, because <code>... if false</code> returns nil no matter what (syntactically valid) expression <code>...</code> is.</p>

<p>So, if you're using <code>map</code>, and you want to skip some elements, you can't just use <code>next</code> or <code>if</code>.
You also need to deal with the <code>nil</code>s when you're done, like this:</p>

<p><code>ruby
1,2,3].map{ |n| next if n.even? ; 2*n }.compact
</code></p>

<p>Alternatively—although it's probably more expensive—you could select the elements you want before proceeding with the operations you want to perform on them:</p>

<p><code>ruby
[1,2,3].reject{ |n| n.even? }.map{ |n| 2*n }
</code></p>

<p>Let me know in the comments if you can think of a generalizable implementation that's more elegant than either of these.
In the meantime, may you never make the same mistake I made!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: More Legible Output with 'Kernel#y']]></title>
    <link href="http://code-worrier.com/blog/more-legible-output-with-y/"/>
    <updated>2012-08-30T14:24:00-04:00</updated>
    <id>http://code-worrier.com/blog/more-legible-output-with-y</id>
    <content type="html"><![CDATA[<p>Ever tried to get a sense of an ActiveRecord object by squinting though output like this?</p>

<p>```</p>

<blockquote><blockquote><p>User.find_by_login("Michael Hoffman").recipes.last
=> #&lt;Recipe id: 18891, title: "Pasta with Lemon-Parmesan Butte
r", created_at: "2012-08-29 00:03:55", updated_at: "2012-08-29
16:20:58", description: "I was walking by a little pizzeria in
the East Vill...", recipe_category_id: 36, serving_size: "4 as
a pasta course, 2 as a main", user_id: 784, editors_pick: fals
e, editors_comments: "", label: "pasta_with_lemonparmesan_butt
er", flag_inappropriate: false, wine_id: nil, recipe_style: "a
b", varietal_id: nil, rating_average: 0, makes_serves: "Serves
", flag_inappropriate_comments: nil, sommelier_comments: nil,
comments_count: 1, is_winner: false, interest: 1, is_finalist:
nil, new_categories_added: nil, admin_categorization_note: nil</p></blockquote>

<p>```
Yuck.</p></blockquote>

<!-- more -->


<p>Luckily, there's a super simple way to get some nicer formatting.
The <code>Kernel</code> module has a private instance method <code>#y</code> which will print out an active record object (or anything else) as YAML.
Check it out:</p>

<p>```</p>

<blockquote><blockquote><p>y User.find_by_login("Michael Hoffman").recipes.last
--- !ruby/ActiveRecord:Recipe
attributes:
  sommelier_comments:
  recipe_style: ab
  updated_at: 2012-08-29 16:20:58
  admin_categorization_note:
  is_finalist:
  is_winner: "0"
  editors_comments: ""
  serving_size: 4 as a pasta course, 2 as a main
  title: Pasta with Lemon-Parmesan Butter
  interest: "1"
  editors_pick: "0"
  recipe_category_id: "36"
  rating_average: "0"
  id: "18891"
  new_categories_added:
  flag_inappropriate_comments:
  wine_id:
  description: "I was walking by a little pizzeria in the East</p>

<pre><code>Village - one I've never been to and may never go to - and
I slowed my gait to glance at the menu. My eyes happened t
o land on a pasta dish. I don't remember exactly what it w
as called, but it involved lemon and parmesan, and not muc
h else. Lemon! So obvious. Why had I never thought of that
? The next night I made this for dinner."
</code></pre>

<p>  comments_count: "1"
  makes_serves: Serves
  varietal_id:
  user_id: "784"
  label: pasta_with_lemonparmesan_butter
  flag_inappropriate: "0"
  created_at: 2012-08-29 00:03:55
=> nil
```</p></blockquote></blockquote>

<p>Notice that, in addition to producing more legible formatting, <code>#y</code> does not truncate values, so we get to see the whole description of the recipe.
Another great use case for this method is visualizing nested hashes and arrays.</p>

<p>```</p>

<blockquote><blockquote><p>a = {:animals => {:mammals => [:dog, :cat, :narwhal], :fish => [:tuna, :shark] }, :fruits => [:plum, :peach, :banana]}
=> {:fruits=>[:plum, :peach, :banana], :animals=>{:mammals=>[:dog, :cat, :narwhal], :fish=>[:tuna, :shark]}}</p>

<h2>y a</h2>

<p>:fruits:
- :plum
- :peach
- :banana
:animals:
  :mammals:
  - :dog
  - :cat
  - :narwhal
  :fish:
  - :tuna
  - :shark
=> nil
```</p></blockquote></blockquote>

<p>Nice, huh?</p>

<p>One caveat:
<a href="http://stackoverflow.com/questions/11571801/rails-console-y-helper-returns-nameerror-rather-than-yaml-formatting-output/11572045#11572045">Apparently</a> this method relies on the <a href="http://stackoverflow.com/a/11572045">Syck YAML parser</a>.
For this reason, it won't immediately work out of the box with Ruby 1.9.3, which uses the <a href="https://github.com/tenderlove/psych/">Psych parser</a> by default.
If you're using 1.9.3 and you want to play around with <code>Kernel#y</code>, run <code>YAML::ENGINE.yamler = 'syck'</code> to change parsers.</p>

<p>And a question: I'd like to know how to get <code>#y</code> to print out ActiveRecord attributes in the same order as they are normally displayed.</p>

<p>(By the way, I highly recommend trying out <a href="http://food52.com/recipes/18891_pasta_with_lemonparmesan_butter">the recipe</a> mentioned above.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All your undefined vars are evaluate to nil.]]></title>
    <link href="http://code-worrier.com/blog/all-your-vars/"/>
    <updated>2012-08-27T18:14:00-04:00</updated>
    <id>http://code-worrier.com/blog/all-your-vars</id>
    <content type="html"><![CDATA[<p><em>(NB: I learned much of what I discuss here from this <a href="http://stackoverflow.com/a/4023224/882025">post</a>.)</em></p>

<p>What does a brand new, never-before-mentioned variable evaluate to in Ruby?
Perhaps it seems that the correct answer is: it depends what kind of variable.
Undefined instance variables, for example, evaluate to <code>nil</code>, whereas undefined local variables can't be evaluated at all.</p>

<!-- more -->


<p>A little experimentation in irb seems to confirm this hypothesis.
Uninitialize local variables raise a <code>NameError</code>:</p>

<p>```</p>

<blockquote><blockquote><p>local_variables
=> []
local_var
NameError: undefined local variable or method <code>local_var' for main:Object
```
whereas instance variables evaluate to</code>nil`:</p></blockquote></blockquote>

<p>```</p>

<blockquote><blockquote><p>instance_variables
=> []
@instance_var
=> nil
```</p></blockquote></blockquote>

<p>(Global variables behave the same way in this respect as instance varables.)</p>

<p>So, again, it seems as if the correct answer to our question is, "It depends."
But that's wrong.
In fact, the question has a single, simple correct answer:
<em>All types of uninitialized variables evaluate to nil.</em></p>

<p>Here's proof:</p>

<p>```</p>

<blockquote><blockquote><p>local_var = "something or other" if false
=> nil
local_var
=> nil
```</p></blockquote></blockquote>

<p>The initialization of <code>local_var</code> is never evaluated, because the condition <code>false</code> is, of course, not met.
Yet, it seems that the mere fact that the parser has parsed <code>local_var</code> suffices to avoid the <code>NameError</code> when evaluating the variable.
Why?</p>

<p>The answer is that the <code>NameError</code> was merely an error of ambiguity:
In our first example, the parser could not decide whether <code>local_var</code> was a local variable, or the name of a method—shorthand for <code>self.local_var</code>.
The error message we got didn't do a great job of explaining this, but it did hint at it with the phrase "variable or method".
Once the parser has encountered <code>local_var</code> in an unambiguously variable-like context—namely, <code>local_var = "something or other"</code>— it has no problem evaluating the name as the name of a variable.
And, as I've claimed, all uninitialized variable evaluate to <code>nil</code>.</p>

<p>So, what appeared to be a difference between local varables and other types of variables is actually just a coincidence of Ruby syntax.
Ruby gives us the flexibility to leave the receiver to which we pass a method implicit:
if we don't explicitly identify a reciever, the message is passed to the current object.
However, this flexibilty comes at the price of ambiguity;
absent additional context, methods invoked on implcitly defined receivers look to the world (and, more importantly, the parser!) just like local variables.</p>
]]></content>
  </entry>
  
</feed>
