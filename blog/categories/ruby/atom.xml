<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Code Worrier]]></title>
  <link href="http://code-worrier.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://code-worrier.com/"/>
  <updated>2013-03-18T22:06:54-04:00</updated>
  <id>http://code-worrier.com/</id>
  <author>
    <name><![CDATA[Michael Hoffman]]></name>
    <email><![CDATA[m@hof.fm]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[404 and 500 Error Pages in Rails]]></title>
    <link href="http://code-worrier.com/blog/error-pages-in-rails/"/>
    <updated>2013-02-09T13:43:00-05:00</updated>
    <id>http://code-worrier.com/blog/error-pages-in-rails</id>
    <content type="html"><![CDATA[<p>There are many approaches to responding to failed requests in Rails.
Here I offer the way I currently favor setting things up.
I'm hoping that this might start a conversation about best practices;
I'm sure I could do better!</p>

<p>The default way Rails handles requests to which your application does not have a contentful response is to serve up static HTML documents stored in the public directory.
In particular, 500 (server error) and 404 (not found) responses result in the application's rendering <code>500.html</code> and <code>404.html</code>, respectively.</p>

<!-- more -->


<p>This default approach is solid—it can be relied upon to display the correct pages in the correct conditions— but it does not allow customization of those pages.
These error pages can't execute ruby code, and so they can't use your layouts, can't interact with your data, and can't vary based on conditions such as the time, the user, or the nature of the request.
Such customizations can imporve user experience and reduce bounce rates when things go wrong.</p>

<p>For these reasons, it's tempting to rescue all kinds of exceptions and render full-blown erb templates in response to them.
I think this strategy is reasonable in the case of 404 errors, and here's how I do it:</p>

<p>``` ruby app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::Base</p>

<p>  # custom 404
  unless Rails.application.config.consider_all_requests_local</p>

<pre><code>rescue_from ActiveRecord::RecordNotFound,
            ActionController::RoutingError,
            ActionController::UnknownController,
            ActionController::UnknownAction,
            ActionController::MethodNotAllowed do |exception|

  # Put loggers here, if desired.

  redirect_to four_oh_four_path
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>You can define <code>four_oh_four_path</code> and the corresponding action and template however you'd like.
A similar but lighter-weight approach would be to render a template in your <code>app/view/shared/</code> directory instead of redirecting to an action.
In any case, we wrap this rescue block in the <code>consider_all_requests_local</code> condition, because we'd still like to get an informative stack trace in development mode.</p>

<p>It's tempting to treat 500s analogously, but I think that would be a mistake.
If your application is returning a 500 response, chances are something has gone wrong, and the behavior it's exhibiting is not what you expected.
Given this, who's to say whether or not your fancy custom 500 page will load?
What if the bug is in the very code that catches and responds to errors?</p>

<p>For these reasons, it is much safer to take the default approach to 500 errors.
Don't like your static 500 page?
My suggestion is: make sure that people rarely get to see it.</p>

<p>To get some inspiration for such pages, you could the <code>/500</code> path your favorite websites.
<a href="https://github.com/500" target="_blank">Here</a>
<a href="https://twitter.com/500" target="_blank">are</a>
<a href="https://path.com/500" target="_blank">some</a>
<a href="http://www.heroku.com/500" target="_blank">examples</a>.
And
<a href="http://food52.com/500" target="_blank">here is the page</a>
I recently made for Food52.
(Thanks to
<a href="http://ryanahamilton.com/" target="_blank">Ryan</a>
for finding the image and helping make the page responsive!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Slugs in Rails without Gems]]></title>
    <link href="http://code-worrier.com/blog/custom-slugs-in-rails/"/>
    <updated>2013-02-01T16:48:00-05:00</updated>
    <id>http://code-worrier.com/blog/custom-slugs-in-rails</id>
    <content type="html"><![CDATA[<p>There are some
 <a href="https://github.com/norman/friendly_id" target="_blank">nice</a>
 <a href="https://github.com/Sutto/slugged" target="_blank">gems</a>
out there to help you create and manage human-readable slugs in Rails.
However, our requirements at Food52 were simple enough—and different enough from the standard case—that I thought I'd have a go at building a slugging system from scratch.</p>

<h2>The Problem</h2>

<p>As an example of the desired behavior, given that we want to use the attribute <code>name</code> to generate slugs for users, and given that my user id is 784 and my name is "Michael Hoffman", the slug for my user page should be:</p>

<blockquote><p><code>"784-michael-hoffman"</code></p></blockquote>

<p>(We leave the id in because we like it there!
It makes debugging easier and it allows us to use Active Record <code>find</code> to look up objects from params.)</p>

<p>Furthermore, we want our slugs to adapt gracefully to changing circumstances.
So, if my name changes, the slug should do...something smart.</p>

<p>Getting a little more abstract, our requirements are as follows:</p>

<!-- more -->


<ol>
<li>It should be possible to opt models in to custom slugging.</li>
<li>Custom slugs should have the form: <code>[:id]-[parameterized-string]</code>.</li>
<li>The string to be parameterized should be configurable per model.</li>
<li>Relevant changes in records' attributes should be reflected in the slug.</li>
<li>Records should have only one slug apiece, even as attribute values change.</li>
</ol>


<p>That's the problem.
In this post, I explain my solution.
Even if your custom slug needs are slightly different, I hope the general strategy might be useful.</p>

<h2>A Naive Attempt</h2>

<p>Before we begin, we need some background on how Rails handles slugs by default.
Active Record has an instance method <code>#to_param</code>, which Action Pack uses to create URLs.
By default, <code>#to_param</code> returns the id of the object, converted to a string.
(See the source,
 <a href="http://apidock.com/rails/ActiveRecord/Integration/to_param" target="_blank">here</a>
.)
Thus, the default path to my user page (given standard resourceful routing) would be <code>"/users/784"</code>.
However, it is possible to customize slugs by overriding this method on a model-by-model basis.</p>

<p>So, the naive way to get the result we want would be to add a method like this one to the User model:</p>

<p>``` ruby app/model/user.rb
class User &lt; ActiveRecord::Base</p>

<p>  # [...]</p>

<p>  def to_param</p>

<pre><code>[id, name.parameterize].join("-")
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This approach meets the first four requirements, but there are two problems with it.
First, we're going to have to repeat this method (modulo the string to be parameterized) in all the models for which we want human-readable slugs.</p>

<p>Second, it fails to meet the fifth requirement.
Specifically, as users' names change, we will end up with many different addresses that point to the same content.
For instance, if I change my name to, say, "Michael Danger Hoffman", then Action-Pack-generated links to my profile will use <code>784-michael-danger-hoffman</code>, but anyone who'd previously copied the link, or bookmarked it, will be able to reach the same page by visiting the old slug.
Not only is that confusing to humans, it's also confusing to search bots.
Confusing search bots makes them <a href="http://www.geekologie.com/2011/09/22/stupid-robots.gif" target="_blank">sad</a>!</p>

<h2>A Better Solution</h2>

<p>Let's build on the naive solution to create a slugging system that can be applied succinctly across many models.
(We'll deal with the duplicate content problem in a another pass.)</p>

<p>Given a model, there are only two things we need to know about it with regard to slugging:</p>

<ul>
<li>Should it use custom slugs?</li>
<li>If so, what string should it use to create them?</li>
</ul>


<p>Ideally, we want a system that would allow us to opt models in to custom sluging, and simultaneously to specify how to calculate the strings those models should use to create slugs.</p>

<p>We can do this by adding a class method to <code>ActiveRecord::Base</code> that redefines <code>#to_param</code>.</p>

<p>``` ruby lib/app_utilities.rb
module ActiveRecordExtensions
  extend ActiveSupport::Concern</p>

<p>  module ClassMethods</p>

<pre><code># Override 'to_param'.
def custom_slugs_with(seed)
  self.redefine_method(:to_param) do
    [id, self.send(seed).parameterize].join("-")
  end
end
</code></pre>

<p>  end</p>

<p>  # Include above methods in all models.
  ActiveRecord::Base.send(:include, ActiveRecordExtensions)</p>

<p>end
```</p>

<p>We're going to want to make <code>::custom_slugs_with</code> available in all models, so let's require this file in an initializer:</p>

<p><code>ruby config/initializers/active_record_extensions.rb
require "app_util"
</code></p>

<p>Requiring this file will execute the include call, including <code>ActiveRecordExtensions</code> in <code>ActiveRecord::Base</code> (andmaking the module's methods available to Active Record's descendants).
The <code>::custom_slugs_with</code> method takes as an argument the name of an instance method that specifies the string to be used in the slug.
So, for instance, adding this line to the User model:</p>

<p>``` ruby app/model/user.rb
class User &lt; ActiveRecord::Base
  custom_slugs_with(:name)</p>

<p>  # [...]
end
```</p>

<p>will serve the same purpose as the <code>to_param</code> method in our original, naive solution.</p>

<p>When we want to retrieve the object from its slug, as will often be the case in controller actions, we can use a simple Active Record find. E.g.</p>

<p>``` ruby app/controllers/users_controller.rb
class UsersController &lt; ApplicationController</p>

<p>  #[...]</p>

<p>  def show</p>

<pre><code>@user = User.find(params[:id])
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Find is smart enough to parse strings like these and extract the correct id.</p>

<p>Lastly, if we wanted to use an explicit method to generate the string (instead of relying on the attribute, <code>name</code>), we could define that method in the User model and pass its symbolized name into the <code>::custom_slugs_with</code>.</p>

<h2>Keeping Slugs Consistent</h2>

<p>We still have a lingering problem.
The attributes from which these custom slugs are generated might change.
Moreover, we might be installing this system in an application that already has a different slugging system.
Both of these eventualities will lead us into to the uncomfortable situation I mentioned above: having multiple URLs that refer to the same content.
To get around this problem, let's treat the record's current slug—the one we get when we call <code>#to_param</code> on it—as canonical.
Then, when we get a request for an out-of-date or incorrect slug, we can redirect the canonical one.</p>

<p>We'll do this in basically the same way in every controller, so let's add our new code to the application controller.
The first method checks if the slug is canonical.
The second redirects to the canonical slug, as retrieved by Action Pack.</p>

<p>``` ruby app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::Base</p>

<p>  #[...]</p>

<p>  ##
  # Check if the current slug is not the cannonical one.
  def bad_slug?(object)</p>

<pre><code>params[:id] != object.to_param
</code></pre>

<p>  end</p>

<p>  ##
  # 301 redirect to canonical slug.
  def redirect_to_good_slug(object)</p>

<pre><code>  redirect_to params.merge({
                :controller =&gt; controller_name,
                :action =&gt; params[:action],
                :id =&gt; object.to_param,
                :status =&gt; :moved_permanently
              })
</code></pre>

<p>  end
end
```</p>

<p>Now we can call these methods from controller actions that we want to redirect non-canonical slugs:</p>

<p>``` ruby app/controllers/users_controller.rb
class UsersController &lt; ApplicationController</p>

<p>  #[...]</p>

<p>  def show</p>

<pre><code>@user = User.find(params[:id])
redirect_to_good_slug(@user) and return if bad_slug?(@user)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This gets the job done.
Requests for <code>"/users/784-something-totally-weird"</code> will redirect to <code>"/users/784-Michael-Hoffman"</code> as desired.
Changing my name will change the target of this redirection.</p>

<p>I must admit, though, that I find this solution less than ideal.
It requires repeating the redirect-if-bad-slug code in many actions.
However, I have not yet found a better approach.
If you have one, I'd love to hear it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tiny benchmarking utility]]></title>
    <link href="http://code-worrier.com/blog/tiny-benchmarking/"/>
    <updated>2012-09-30T14:54:00-04:00</updated>
    <id>http://code-worrier.com/blog/tiny-benchmarking</id>
    <content type="html"><![CDATA[<p>While working on a longer (forthcoming) post, I wrote a little benchmarking utility that I want to share.
Here it is:</p>

<p>```ruby tiny_timer.rb
module TinyTimer
  def self.benchmark(samples=10)</p>

<pre><code>times = []

samples.times do
  start = Time.now
  yield
  times &lt;&lt; (Time.now - start)
end

times.sum / samples.to_f
</code></pre>

<p>  end
end
```</p>

<!-- more -->


<p>As you can see, this method runs a specified number of trials of a block of code and returns the average time in seconds it took to execute the block.
Usage examples:</p>

<p>```ruby</p>

<blockquote><blockquote><p>require 'tiny_timer'
=> ["TinyTimer"]
TinyTimer.benchmark{ (0..100000).map{rand(10)}.sort }
=> 0.0670641
TinyTimer.benchmark(100){ 2**1000000 }
=> 0.00841815
```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invoke a Rake Task from Another Task]]></title>
    <link href="http://code-worrier.com/blog/embedded-rake-tasks/"/>
    <updated>2012-09-25T17:02:00-04:00</updated>
    <id>http://code-worrier.com/blog/embedded-rake-tasks</id>
    <content type="html"><![CDATA[<p>You can invoke a rake task from another rake task.
Here's how:</p>

<p>```ruby examples.rake
namespace :examples do</p>

<p>  desc "Inner task."
  task :inner_task => :environment do</p>

<pre><code># Some code that accomplishes a task.
</code></pre>

<p>  end</p>

<p>  desc "Outer task."
  task :outer_task do</p>

<pre><code># Some code.
Rake::Task['examples:inner_task'].execute #Execute innter task.
# Some other code.
</code></pre>

<p>  end</p>

<p>end
```</p>

<!-- more -->


<p>Now when you execute <code>rake examples:outer_task</code>, you will execute the inner task in whatever context you placed it.
Using this contruction allows you to break down unweildy tasks into smaller ones, which perhaps you'll want to reuse in different contexts elsewhere.</p>

<p>Here's a toy examples that actually works:</p>

<p>```ruby toys.rake
namespace :toys do</p>

<p>  desc "Inner task: Square the value."
  task :square do</p>

<pre><code>@value *= @value
</code></pre>

<p>  end</p>

<p>  desc "Outer task: Initialize the value and square thrice."
  task :square_three_times do</p>

<pre><code>@value = 2
3.times{Rake::Task['toys:square'].execute}
puts "The value is #{@value}."
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Running this in the shell, we get:</p>

<p><code>bash
$ rake toys:square_three_times --trace
** Invoke toys:square_three_times (first_time)
** Execute toys:square_three_times
** Execute toys:square
** Execute toys:square
** Execute toys:square
The value is 256.
</code></p>

<p>And yes, I know you're thinking it now: rake tasks can call themselves quite happily.</p>

<p>You can also invoke rake tasks from within ActiveRecord migrations.
This can come in handy when you want to initialize a bunch of data immeidately after altering the database schema.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Ruby's 'next' keyword return?]]></title>
    <link href="http://code-worrier.com/blog/map-and-next/"/>
    <updated>2012-09-04T19:55:00-04:00</updated>
    <id>http://code-worrier.com/blog/map-and-next</id>
    <content type="html"><![CDATA[<p>Pop quiz, hotshot:
<strong>What does the following Ruby expression return?</strong></p>

<p><code>ruby
[1,2,3].map{ |n| next if n.even? ; 2*n }
</code></p>

<!-- more -->


<p>It turns out I'm not much of a hotshot, because this how I reasoned through this question while at work today:</p>

<ol>
<li><code>Array#map</code> evaluates the block for each member of the array and returns a new array of the returned values, in order.</li>
<li>When <code>n == 1</code> or <code>n == 3</code>, the block evaluates to <code>2*n</code>.</li>
<li>However, when <code>n == 2</code> we hit the <code>next</code> keyword and nothing gets evaluated.</li>
<li>Therefore this expression returns <code>[2,6]</code>.</li>
</ol>


<p>Reinforcing this line of reasoning, a very similar expression,</p>

<p><code>ruby
[1,2,3].each{ |n| next if n.even? ; puts 2*n }
</code></p>

<p>gives the analog of this result:
it prints "2" and then "6" and then return.
The iteration that hits <code>next</code> just gets skipped.
Analogously, the version with <code>map</code> should return <code>[2,6]</code></p>

<p><strong>Wrong!</strong></p>

<p>In fact, the answer to the quiz is...</p>

<p><code>ruby
[2, nil, 6]
</code></p>

<p>The error in the reasoning above is contained in premise (3).
It turns out that <strong>when <code>next</code> is evaluated, it returns <code>nil</code></strong>.</p>

<p>Similarly,</p>

<p><code>ruby
[1,2,3].map{ |n| 2*n if n.odd? }
</code></p>

<p>returns the same array, <code>[2, nil, 6]</code>, because <code>... if false</code> returns nil no matter what (syntactically valid) expression <code>...</code> is.</p>

<p>So, if you're using <code>map</code>, and you want to skip some elements, you can't just use <code>next</code> or <code>if</code>.
You also need to deal with the <code>nil</code>s when you're done, like this:</p>

<p><code>ruby
1,2,3].map{ |n| next if n.even? ; 2*n }.compact
</code></p>

<p>Alternatively—although it's probably more expensive—you could select the elements you want before proceeding with the operations you want to perform on them:</p>

<p><code>ruby
[1,2,3].reject{ |n| n.even? }.map{ |n| 2*n }
</code></p>

<p>Let me know in the comments if you can think of a generalizable implementation that's more elegant than either of these.
In the meantime, may you never make the same mistake I made!</p>
]]></content>
  </entry>
  
</feed>
